"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[74456],{1650:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Pasted image 20250103191609-39818880985f0659c09f68113cb0606b.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(96540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},32512:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/symbols-ezgif.com-optimize-ec64e763911c23dee817a53e7079d405.gif"},66084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(74848),i=t(28453);const o={},a=void 0,r={id:"frontend/Advanced/Command palette/Debugger",title:"Debugger",description:"Debugger is a Command palette tool that attaches to a notebook and a working kernel to intercept the evaluation process and monitor symbol changes.",source:"@site/docs/frontend/Advanced/Command palette/Debugger.md",sourceDirName:"frontend/Advanced/Command palette",slug:"/frontend/Advanced/Command palette/Debugger",permalink:"/frontend/Advanced/Command palette/Debugger",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1748709296e3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AI Assistant",permalink:"/frontend/Advanced/Command palette/AI Assistant"},next:{title:"Templates",permalink:"/frontend/Advanced/Command palette/Templates"}},c={},l=[{value:"Inspecting Mode",id:"inspecting-mode",level:2},{value:"Watching Symbols",id:"watching-symbols",level:2},{value:"Breakpoints",id:"breakpoints",level:2},{value:"Asserts",id:"asserts",level:3},{value:"Symbols",id:"symbols",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Debugger is a ",(0,s.jsx)(n.a,{href:"/frontend/Command%20palette",children:"Command palette"})," tool that attaches to a notebook and a working kernel to intercept the evaluation process and monitor symbol changes."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(1650).A+"",width:"1736",height:"726"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Inspect"})," is a central mode for debugging."]}),"\n",(0,s.jsx)(n.h2,{id:"inspecting-mode",children:"Inspecting Mode"}),"\n",(0,s.jsxs)(n.p,{children:["It stops the current execution and allows you to interact with any other cells in the sub-session, enabling you to check the status of various symbols. You can write and evaluate other cells in ",(0,s.jsx)(n.code,{children:"Inspect"})," mode."]}),"\n",(0,s.jsx)(n.p,{children:"For example, evaluate this one:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mathematica",children:"Do[k = i; Pause[1], {i, 100}];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then switch to ",(0,s.jsx)(n.code,{children:"Inspect"})," mode; it will pause the evaluation. Now, you can check the state of the ",(0,s.jsx)(n.code,{children:"k"})," symbol by running a new cell with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mathematica",children:"k\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["You can always continue execution from this mode by clicking ",(0,s.jsx)(n.code,{children:"Continue"})," until the next possible break. All transitions take time and depend on the current kernel occupancy."]})}),"\n",(0,s.jsx)(n.h2,{id:"watching-symbols",children:"Watching Symbols"}),"\n",(0,s.jsxs)(n.p,{children:["You can add a symbol to a tracking list to monitor its ",(0,s.jsx)(n.code,{children:"OwnValue"})," in real-time automatically. It won't interrupt your execution unless you enable the checkbox for that option."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Live updates are supported only for assignments, i.e., when ",(0,s.jsx)(n.code,{children:"symbol = *newValue*"}),". If you mutate a part of a ",(0,s.jsx)(n.code,{children:"List"}),", it won't trigger an update."]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Shallow"})," is applied to an expression of a symbol for display in the tracking window."]})}),"\n",(0,s.jsx)(n.h2,{id:"breakpoints",children:"Breakpoints"}),"\n",(0,s.jsxs)(n.p,{children:["In Wolfram Language, traditional breakpoints are difficult to implement since there is no ",(0,s.jsx)(n.em,{children:"source code file"})," in the classical sense. Everything is an expression, and a breakpoint must be an expression as well."]}),"\n",(0,s.jsxs)(n.p,{children:["There are two sources for breaking events, both of which immediately switch the kernel to ",(0,s.jsx)(n.a,{href:"#Inspecting%20Mode",children:"Inspecting Mode"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"asserts",children:"Asserts"}),"\n",(0,s.jsxs)(n.p,{children:["First, ",(0,s.jsx)(n.strong,{children:"enable breaking on assertions"})," from the dropdown menu in the top bar of the debugger. Then, whenever execution encounters ",(0,s.jsx)(n.code,{children:"False"})," in an ",(0,s.jsx)(n.a,{href:"/frontend/Reference/Misc/Assert",children:"Assert"}),", it will break."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mathematica",children:'Do[k = i; If[i > 6, Assert[False, "Hey"]]; Pause[1], {i, 100}];\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This code will break automatically after 6 seconds. In ",(0,s.jsx)(n.code,{children:"Inspect"})," mode, evaluating ",(0,s.jsx)(n.code,{children:"k"})," will return ",(0,s.jsx)(n.code,{children:"7"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you track the ",(0,s.jsx)(n.code,{children:"k"})," symbol at the same time, you will see the following:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(79263).A+"",width:"800",height:"468"})}),"\n",(0,s.jsx)(n.h3,{id:"symbols",children:"Symbols"}),"\n",(0,s.jsxs)(n.p,{children:["When a symbol is assigned a new value, it generates an event in the debugger. Use the ",(0,s.jsx)(n.code,{children:"Break on"})," checkbox to enable breaking."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mathematica",children:"Do[k = i; If[i > 6, test = Now]; Pause[1], {i, 100}];\n"})}),"\n",(0,s.jsx)(n.p,{children:"This code will break after 6 iterations."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(32512).A+"",width:"800",height:"468"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},79263:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/assert-ezgif.com-optimize-2991d4452635211bd7dbf0f07a1cb819.gif"}}]);