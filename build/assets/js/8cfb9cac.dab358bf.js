"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[13716],{28453:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>s});var t=n(96540);const i={},o=t.createContext(i);function c(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(o.Provider,{value:r},e.children)}},46598:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var t=n(74848),i=n(28453);const o={env:["WLJS"],package:"wljs-graphics-d3",origin:"https://github.com/JerryI/wljs-graphics-d3/"},c=void 0,s={id:"frontend/Reference/Graphics/SVGGroup",title:"SVGGroup",description:"represents an isolated group of 2D graphics primitives (see Graphics). The common use case is to reset all attributes like RGBColor, Opacity and the rest defined in Directive.",source:"@site/docs/frontend/Reference/Graphics/SVGGroup.md",sourceDirName:"frontend/Reference/Graphics",slug:"/frontend/Reference/Graphics/SVGGroup",permalink:"/frontend/Reference/Graphics/SVGGroup",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1749907629e3,frontMatter:{env:["WLJS"],package:"wljs-graphics-d3",origin:"https://github.com/JerryI/wljs-graphics-d3/"},sidebar:"tutorialSidebar",previous:{title:"SVGAttribute",permalink:"/frontend/Reference/Graphics/SVGAttribute"},next:{title:"Scale",permalink:"/frontend/Reference/Graphics/Scale"}},a={},p=[{value:"Z-ordering",id:"z-ordering",level:3}];function d(e){const r={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-mathematica",children:"SVGGroup[g_]\n"})}),"\n",(0,t.jsxs)(r.p,{children:["represents an isolated group of 2D graphics primitives (see ",(0,t.jsx)(r.a,{href:"/frontend/Reference/Graphics/",children:"Graphics"}),"). The common use case is to reset all attributes like ",(0,t.jsx)(r.a,{href:"/frontend/Reference/Graphics/RGBColor",children:"RGBColor"}),", ",(0,t.jsx)(r.a,{href:"/frontend/Reference/Graphics/Opacity",children:"Opacity"})," and the rest defined in ",(0,t.jsx)(r.a,{href:"/frontend/Reference/Graphics/Directive",children:"Directive"}),"."]}),"\n",(0,t.jsx)(r.p,{children:"Another handy property is that external attributes are applied solely to the group container, i.e. it does not propagate deeper. For example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-mathematica",children:"o = 0.5;\n\n{Opacity[o // Offload], SVGGroup[{\n\tDisk[{0,0}, 2], Opacity[0.5], Red, RegularPolygon[3]\n}]} // Graphics\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-mathematica",children:"o = 0.1;\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Here ",(0,t.jsx)(r.code,{children:"Opacity"})," is applied to a container, but does not affect opacity of inner objects."]}),"\n",(0,t.jsx)(r.h3,{id:"z-ordering",children:"Z-ordering"}),"\n",(0,t.jsxs)(r.p,{children:["If you dynamically add primitives to ",(0,t.jsx)(r.a,{href:"/frontend/Reference/Graphics/",children:"Graphics"}),", by adding them to ",(0,t.jsx)(r.code,{children:"SVGGroup"})," can help you to control z-order with respect to other groups."]})]})}function l(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);