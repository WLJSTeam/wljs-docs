"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[14143],{99448:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(17624),a=t(4552);const o={title:"Custom input element with 2 ways data-binding",authors:"jerryi",enableComments:!0,tags:["javascript","wlx","ui"]},s=void 0,l={permalink:"/wljs-docs/blog/2024/12/23/2ways",source:"@site/blog/2024-12-23-2ways.md",title:"Custom input element with 2 ways data-binding",description:"It is also possible to combine your custom input element with traditional dynamics. For instance you want to create multiple input fields, which are synchronised  with each other or using some equation.",date:"2024-12-23T00:00:00.000Z",tags:[{label:"javascript",permalink:"/wljs-docs/blog/tags/javascript"},{label:"wlx",permalink:"/wljs-docs/blog/tags/wlx"},{label:"ui",permalink:"/wljs-docs/blog/tags/ui"}],readingTime:1.55,hasTruncateMarker:!0,authors:[{name:"Kirill Vasin",title:"Maintainer",url:"https://github.com/JerryI",imageURL:"https://avatars.githubusercontent.com/u/4111822?s=48&v=4",key:"jerryi"}],frontMatter:{title:"Custom input element with 2 ways data-binding",authors:"jerryi",enableComments:!0,tags:["javascript","wlx","ui"]},unlisted:!1,prevItem:{title:"Automata-like shooter. A teaser",permalink:"/wljs-docs/blog/2025/01/07/nier"},nextItem:{title:"Point charges plot",permalink:"/wljs-docs/blog/2024/12/16/charges"}},r={authorsImageUrls:[void 0]},c=[];function u(e){const n={code:"code",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.M)(),...e.components},{CodeMirror:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeMirror",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"It is also possible to combine your custom input element with traditional dynamics. For instance you want to create multiple input fields, which are synchronised  with each other or using some equation."}),"\n",(0,i.jsxs)(n.p,{children:["You need a WLJS Function with ",(0,i.jsx)(n.code,{children:"update"})," methods defined. One can generate those on-fly for each input element within a WLX script"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'.wlx\n\nCustomInput[sym_, OptionsPattern[]] := Module[{\n  Label = OptionValue["Label"],\n  Ev = OptionValue["Event"],\n  Pattern = OptionValue["Pattern"],\n  Handler\n},\n\n  With[{Template = \n    <div class="mt-2 flex">\n      <div style="width: 7rem" class="flex shrink-0 items-center rounded-l-md bg-white px-3 text-base text-gray-500 outline outline-1 -outline-offset-1 outline-gray-300 sm:text-sm/6"><Label/></div>\n      <input type="number" step="1" class="-ml-px block w-full grow rounded-r-md bg-white px-3 py-1.5 text-base text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6" placeholder="0.0"/>\n    <script type="module">\n      core[\'<Handler/>\'] = async (args, env) => {\n        const input = env.element.getElementsByTagName(\'input\')[0];\n\n\n        const data = await interpretate(args[0], env);\n        input.value = +data.toFixed(4);\n        env.local.input = input;\n\n        input.addEventListener(\'change\', () => {\n          \n          console.warn(input.value);\n          env.local.skip = true;\n          server.kernel.emitt(\'<Ev/>\', input.value, \'<Pattern/>\');\n        });        \n      }\n\n      core[\'<Handler/>\'].update = async (args, env) => {\n        if (env.local.skip) {\n          env.local.skip = false;\n          return;\n        }\n        \n        console.log(\'Update\');\n        env.local.input.value = +(await interpretate(args[0], env)).toFixed(4);\n      }\n\n      core[\'<Handler/>\'].destroy = () => {\n        delete core[\'<Handler/>\'];\n      }\n\n      core[\'<Handler/>\'].virtual = true;\n    <\/script>\n  </div>\n  },\n    HTMLView[Template, Epilog->(Handler[sym])]\n  ]\n]\n\nOptions[CustomInput] = {"Label"->"", "Event"->"", "Pattern"->"Default"};\n'})}),"\n",(0,i.jsx)(n.p,{children:"what happens here:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"we define a template for our custom input field"}),"\n",(0,i.jsxs)(n.li,{children:["we define a support script with a generated ",(0,i.jsx)(n.code,{children:"Handler"})," function, which reads and updates this input field"]}),"\n",(0,i.jsxs)(n.li,{children:["we pack in into ",(0,i.jsx)(n.code,{children:"HTMLView"}),", which calls our ",(0,i.jsx)(n.code,{children:"Handler"})," on a provided argument after this component has been mounted"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's see it in action"}),"\n",(0,i.jsx)(o,{children:'values = {1,1};\n\nevent = CreateUUID[];\n\nEventHandler[event, {\n  "x" -> Function[val,\n    values = {val, (*SpB[*)Power[val(*|*),(*|*)2](*]SpB*)} // N // Re;\n  ],\n\n  "x2" -> Function[val,\n    values = {(*SqB[*)Sqrt[val](*]SqB*), val} // N // Re;\n  ]\n}];\n\n{\n  CustomInput[values[[1]] // Offload, "Event"->event, "Pattern"->"x", "Label"->"x"],\n  CustomInput[values[[2]] // Offload, "Event"->event, "Pattern"->"x2", "Label"->"x<sup>2</sup>"]\n} // Column'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(90386).c+"",width:"800",height:"160"})})]})}function d(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},90386:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/fields-ezgif.com-video-to-gif-converter-553959e2d416c2aa4cc82261b90aa3f0 (1)-553959e2d416c2aa4cc82261b90aa3f0.gif"},4552:(e,n,t)=>{t.d(n,{I:()=>l,M:()=>s});var i=t(11504);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);