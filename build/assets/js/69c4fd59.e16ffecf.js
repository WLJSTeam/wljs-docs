"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[83633],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(96540);const l={},o=s.createContext(l);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},52102:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var s=t(74848),l=t(28453);const o={},r=void 0,i={id:"frontend/Advanced/Events system/Cells and windows",title:"Cells and windows",description:"Cells and window objects can also emit events, and there is no need to clone event objects to assign multiple handlers (this is done automatically once the EventHandler method is applied).",source:"@site/docs/frontend/Advanced/Events system/Cells and windows.md",sourceDirName:"frontend/Advanced/Events system",slug:"/frontend/Advanced/Events system/Cells and windows",permalink:"/frontend/Advanced/Events system/Cells and windows",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1743582564e3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Event System",permalink:"/frontend/Advanced/Events system/event-generators"},next:{title:"Dynamic symbols generation",permalink:"/frontend/Advanced/Events system/Dynamic symbols generation"}},d={},a=[{value:"Cells",id:"cells",level:2},{value:"Window",id:"window",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Cells and window objects can also emit events, and there is no need to clone event objects to assign multiple handlers (this is done automatically once the ",(0,s.jsx)(n.code,{children:"EventHandler"})," method is applied)."]}),"\n",(0,s.jsx)(n.h2,{id:"cells",children:"Cells"}),"\n",(0,s.jsxs)(n.p,{children:["The following functions are available to extract cell objects (",(0,s.jsx)(n.a,{href:"/frontend/Reference/Cells%20and%20Notebook/RemoteCellObj",children:"RemoteCellObj"}),") from the evaluation context:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/frontend/Reference/Cells%20and%20Notebook/EvaluationCell",children:"EvaluationCell"}),": the input cell (where the code is written)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/frontend/Reference/Cells%20and%20Notebook/ResultCell",children:"ResultCell"}),": the output cell (even if it does not exist yet)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The following patterns are available to attach handlers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"Destroy"'}),"\n",(0,s.jsx)(n.li,{children:'"State"'}),"\n",(0,s.jsx)(n.li,{children:'"Error"'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The most practical one is the first:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mathematica",children:'With[{},\n  EventHandler[ResultCell[], {"Destroy" -> (Print["Destroyed!"] &)}];\n  "Lovely day"\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Try reevaluating it multiple times."})}),"\n",(0,s.jsx)(n.p,{children:"It can be used to unsubscribe from listeners or stop tasks once a cell has been reevaluated or destroyed."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Cell events are supported for all types of cells, including ",(0,s.jsx)(n.a,{href:"/frontend/Cell%20types/WLX",children:"WLX"}),", ",(0,s.jsx)(n.a,{href:"/frontend/Cell%20types/Slides",children:"Slides"}),", etc."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Cell events also work for ",(0,s.jsx)(n.strong,{children:"projected outputs to new windows"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"window",children:"Window"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"/frontend/Reference/Frontend%20IO/WindowObj",children:"WindowObj"})," represents the current window where the notebook is running. It is usually used in ",(0,s.jsx)(n.a,{href:"/frontend/Reference/Frontend%20IO/FrontFetch",children:"FrontFetch"})," and ",(0,s.jsx)(n.a,{href:"/frontend/Reference/Frontend%20IO/FrontSubmit",children:"FrontSubmit"}),", but it also supports a few handler patterns:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"Closed"'}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:'Use the "Closed" event to remove tasks running in the background.'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mathematica",children:'test = {0,1,0};\n\nEventHandler[CurrentWindow[], {"Closed" -> Function[Null,\n  test = {1,0,0};\n]}];\n\nGraphics[{RGBColor[test // Offload], Disk[{0,0}, 1]}]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Try reloading the page or window and observe the changes."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);