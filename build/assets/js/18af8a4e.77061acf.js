"use strict";(self.webpackChunkwljs_docs=self.webpackChunkwljs_docs||[]).push([[1138],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),h=o,m=d["".concat(i,".").concat(h)]||d[h]||u[h]||a;return t?r.createElement(m,l(l({ref:n},p),{},{components:t})):r.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=h;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[d]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},2507:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:1},l=void 0,s={unversionedId:"frontend/Evaluation/Static",id:"frontend/Evaluation/Static",title:"Static",description:"Editor in the browser",source:"@site/docs/frontend/Evaluation/Static.md",sourceDirName:"frontend/Evaluation",slug:"/frontend/Evaluation/Static",permalink:"/wljs-docs/docs/frontend/Evaluation/Static",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"frontendSidebar",previous:{title:"Evaluation",permalink:"/wljs-docs/docs/category/evaluation"},next:{title:"Dynamic",permalink:"/wljs-docs/docs/frontend/Evaluation/Dynamic"}},i={},c=[{value:"Editor in the browser",id:"editor-in-the-browser",level:4},{value:"1. WL Processing",id:"1-wl-processing",level:3},{value:"Processing on Master Kernel",id:"processing-on-master-kernel",level:4},{value:"Evaluation on the secondary kernel | Kernel API",id:"evaluation-on-the-secondary-kernel--kernel-api",level:4},{value:"2. JS Processing",id:"2-js-processing",level:3}],p={toc:c},d="wrapper";function u(e){let{components:n,...a}=e;return(0,o.kt)(d,(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"editor-in-the-browser"},"Editor in the browser"),(0,o.kt)("p",null,"When you open an editor and ",(0,o.kt)("strong",{parentName:"p"},"start typing"),", the following happens"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"each character is send to a server and updates the cell (autosaving)"),(0,o.kt)("li",{parentName:"ol"},"editor tries to figure out the language or a cell type "),(0,o.kt)("li",{parentName:"ol"},"considering (2) it changes the highlighting and autocomplete / other plugins")),(0,o.kt)("p",null,"In this sense your input cell is ",(0,o.kt)("strong",{parentName:"p"},"an ultimate tool"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(1430).Z,width:"600",height:"280"})),(0,o.kt)("p",null,"To specify the type it uses a prefix in the first line of the cell"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markdown"},".md\n# Hello\n")),(0,o.kt)("p",null,"it can be anything ",(0,o.kt)("inlineCode",{parentName:"p"},"**.**")," the behavior is defined by so-called ",(0,o.kt)("a",{parentName:"p",href:"../Development/Making%20new%20cell%20types/Processors.md"},"Processors")," (comes with a downloadable package)."),(0,o.kt)("p",null,"Then whatever you typed, you should press ",(0,o.kt)("inlineCode",{parentName:"p"},"Shift-Enter")," to make magic happens"),(0,o.kt)("h3",{id:"1-wl-processing"},"1. WL Processing"),(0,o.kt)("p",null,"JS sends the data via websockets to the server and sets the status of the cell to  ",(0,o.kt)("inlineCode",{parentName:"p"},"working")),(0,o.kt)("mermaid",{value:"flowchart\n  subgraph Browser\n  In[Input Cell]\n  Out[Output Cell]\n    subgraph JS Engine\n        direction RL\n        WJ[Wolfram Interpreter];\n    end\n    WJ[Interpreter] --\x3e Out[Output Cell]\n  end\n  In[InputCell]-- WebSockets --\x3eB[Preprocessor]\n  subgraph Master Kernel\n    B[Preprocessor]\n    V[Postprocessor]\n    subgraph Addons\n        Wolfram\n        Markdown\n        Mermaid\n        HTML\n        JS\n    end\n    Addons -.- B[Preprocessor]\n  end\n  subgraph Secondary Kernel\n    B[Preprocessor]-- TCP/WSTP --\x3eE[Evaluator] -- TCP --\x3e V[Postprocessor] -- WebSockets --\x3e WJ[Interpreter]\n  end"}),(0,o.kt)("h4",{id:"processing-on-master-kernel"},"Processing on Master Kernel"),(0,o.kt)("p",null,"Firstly the preprocessing happens on the first master-kernel. "),(0,o.kt)("p",null,"All cells operations are performed via ",(0,o.kt)("inlineCode",{parentName:"p"},"Kernel/Cells")," module under ",(0,o.kt)("inlineCode",{parentName:"p"},"Kernel/Notebook")," wrapper"),(0,o.kt)("mermaid",{value:'\nflowchart TB\nsubgraph Browser\nJS\nsubgraph Frontend\n\nInputCells\nOutputCells\nUI\n\nend\n\nend\n\nFrontend --"Shift+Enter"--\x3e Evaluate\nsubgraph Notebook["Notebook API"]\n\n  Evaluate\n  Events\n  Processors\n  subgraph MyNotebook["Notebook"]\n\t  Kernel\n  end\nend\nEvents --"Create Cell"--\x3e Frontend \nProcessors ---\x3e CEvaluate\nCEvaluate ---\x3e Processors\n\nEvaluate --"Meta-data"--\x3eCEvaluate\n\nsubgraph Cells["Cell API"]\n  CEvaluate["Evaluate"]\n  CCallback["Callback"]\n\n  CCallback --- CEvaluate\nend\n\nCEvaluate --\x3e Kernel\n\nKernel --Async--\x3e CCallback\n\nsubgraph KernelAPI["Kernel API"]\n  Kernel1["Local Kernel"]\n  Kernel2["Remote Kernel"]\nend\n\nCCallback--Fire--\x3eEvents\n\nKernel <--\x3e KernelAPI'}),(0,o.kt)("p",null,"It applies all available processors to the input expression listed in ",(0,o.kt)("inlineCode",{parentName:"p"},"jsfn'Processors")," . This is an example with Markdown language"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mathematica"},'{\n    MarkdownQ -> <|"SyntaxChecker"->(True&), "Epilog"->(#&), "Prolog"->(#&), "Evaluator"->MarkdownProcessor |>,\n}\n')),(0,o.kt)("p",null,"The pipeline for ",(0,o.kt)("inlineCode",{parentName:"p"},"Processors")," is following"),(0,o.kt)("mermaid",{value:'flowchart TD\n  In["Input String"]\n  In --check--\x3e MarkdownQ\n  MarkdownQ --False--\x3e MermaidQ\n  MermaidQ --False--\x3e WolframQ\n  WolframQ --False--\x3e ERR["Error!"]\n\n  WolframQ--True--\x3eSyntaxChecker\n  MarkdownQ--True--\x3eMProcessor\n  MermaidQ--True--\x3eMMProcessor\n\n  subgraph Kernel["Kernel API"]\n\t  LocalKernel\n\t  RemoteKernel\n  end\n  \n  subgraph WProcessor["Wolfram Processor"]\n  direction LR\n\tSyntaxChecker--\x3eEpilog["Epilog"]\n\tEpilog["Epilog"]--\x3eEvaluator\n\tEvaluator --Async--\x3eProlog\n\n  end\n  Evaluator--\x3eKernel\nKernel --\x3e Evaluator\n\nProlog--\x3eCallback\n  \n\n\n  subgraph MProcessor["Markdown Processor"]\n\t\n  end\n\n  subgraph MMProcessor["Mermaid Processor"]\n\t\n  end'}),(0,o.kt)("p",null,"Here evaluator function (",(0,o.kt)("inlineCode",{parentName:"p"},"WolframProcessor"),") can decide if it returns the result immediately or send to the evaluation to the secondary kernel with a callback included. Also it determines the final output cell subtype (wolfram, html, mermaid) see ",(0,o.kt)("a",{parentName:"p",href:"../Cell%20types/"},"Cell types")," to be interpreted by the frontend running in the browser."),(0,o.kt)("h4",{id:"evaluation-on-the-secondary-kernel--kernel-api"},"Evaluation on the secondary kernel | Kernel API"),(0,o.kt)("p",null,"The expression arrives in a form of string and then converts to the Wolfram Expression with a held head. See ",(0,o.kt)("inlineCode",{parentName:"p"},"Kernel/Evaluator")),(0,o.kt)("p",null,"To support fully [","[Frontend Object]","] it replace them with an actual wolfram expressions. If it is not available on the kernel it makes a query to the master kernel and download them."),(0,o.kt)("p",null,"All non-native boxes, decorations (see ",(0,o.kt)("a",{parentName:"p",href:"/wljs-docs/docs/frontend/Decorations"},"Decorations")," are replaced with the corresponding Wolfram Expressions."),(0,o.kt)("p",null,"The result evaluates normally. However if it encounters the creation function for [","[Frontend Object]","] or registered Frontend Objects (see [","[Writting WebObject]","]) like ",(0,o.kt)("inlineCode",{parentName:"p"},"Graphics"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Plotly")," it replaces them with ",(0,o.kt)("inlineCode",{parentName:"p"},"FrontEndExecutable")," and stores the compressed to JSON data for them into the local storage to be shared lately with the master kernel and a notebook."),(0,o.kt)("p",null,"On the very last stage it converts the result to sort of ",(0,o.kt)("inlineCode",{parentName:"p"},"Boxes")," (see ",(0,o.kt)("a",{parentName:"p",href:"/wljs-docs/docs/frontend/Decorations"},"Decorations"),")."),(0,o.kt)("p",null,"If the resulting string is too long, then instead of a string it returns a pointer to the corresponding data to prevent frontend overloading"),(0,o.kt)("mermaid",{value:'flowchart TB\nIn["Input String"]\n\nsubgraph FrontEndObjects\ndirection TB\n\tObject1\n\tObject2\n\tObject3["..."]\nend\n\n\nToExpression --Get--\x3e FrontEndObjects\n\nsubgraph MasterKernel\nsubgraph Notebook\n\tsubgraph FrontEndObjectsGlobal["FrontEndObjects"]\n\tdirection TB\n\t\tObjectG1["Object1"]\n\t\tObjectG2["Object2"]\n\t\tObjectG3["..."]\n\tend\nend\nend\n\nsubgraph WebObjects\ndirection TB\n\tWebObject1\n\tWebObject2\n\tWebObject3["..."]\nend\n\nFrontEndObjectsGlobal --Sync--\x3e FrontEndObjects\nFrontEndObjects --Sync--\x3e FrontEndObjectsGlobal\n\nEvaluate\n\nToExpression --\x3e Evaluate\n\nEvaluate --Append--\x3eFrontEndObjects\n\nEvaluate--\x3eReplaceAll\n\nReplaceAll--Look--\x3eWebObjects\n\nWebObjects--Append--\x3eFrontEndObjects\n\nReplaceAll--\x3eConvertToBoxes--\x3eOut\n\nOut["Output String"]\n\n\nIn --\x3e ToExpression'}),(0,o.kt)("p",null,"The result, created frontend objects, the cell type are shared via provided callback function with a master kernel. As well as syncs updated or created [","[Frontend Object]","] s."),(0,o.kt)("h3",{id:"2-js-processing"},"2. JS Processing"),(0,o.kt)("p",null,"Once the message is decoded by the frontend in your browser, it creates a cell and fetches the corresponding handler to display the result in a cell. "),(0,o.kt)("p",null,"For example, here the handler function for ",(0,o.kt)("inlineCode",{parentName:"p"},"markdown")," (",(0,o.kt)("a",{parentName:"p",href:"/wljs-docs/docs/frontend/Cell%20types/Markdown"},"Markdown"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class MarkdownCell {\n    dispose() {}\n    constructor(parent, data) {\n        //parse markdown code and draw it to DOM element\n        parent.element.innerHTML = marked.parse(data);\n        return this;\n    }\n}\n")),(0,o.kt)("p",null,"After that the user can see the content. It also takes care about syntax highlighting and anything else. This process is boosted by the server side rendering, i.e. the server also provides DOM template for the cell wrapper, controls, buttons (as much as possible) to release an extra load from the client."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Any action with a cell must be approved by the server via Notebook API functions. If you remove the cell or add a new one the client waits the server's reply for it. Therefore it makes sure that the data is synced perfectly.")))}u.isMDXComponent=!0},1430:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/ezgif.com-video-to-gif-4-cdeae5baf206018d7f65081efe4fe3ff.gif"}}]);