"use strict";(self.webpackChunkwljs_docs=self.webpackChunkwljs_docs||[]).push([[3668],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||l;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:3},o="Executables",i={unversionedId:"frontend/executables",id:"frontend/executables",title:"Executables",description:"The general definition will be",source:"@site/docs/frontend/executables.md",sourceDirName:"frontend",slug:"/frontend/executables",permalink:"/wljs-interpreter/docs/frontend/executables",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/executables.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"frontendSidebar",previous:{title:"Functions",permalink:"/wljs-interpreter/docs/frontend/front-end-functions"},next:{title:"Wolfram Language",permalink:"/wljs-interpreter/docs/frontend/Cell types/Wolfram Language"}},s={},c=[{value:"As a pointer",id:"as-a-pointer",level:2},{value:"Mutabillity",id:"mutabillity",level:3},{value:"Direct update (the fastest)",id:"direct-update-the-fastest",level:4},{value:"Nesting",id:"nesting",level:3},{value:"Dynamic binding",id:"dynamic-binding",level:3},{value:"Instancing",id:"instancing",level:3},{value:"\ud83d\udea7 Applying | Injection arguments",id:"-applying--injection-arguments",level:3},{value:"Cheat-sheet",id:"cheat-sheet",level:2},{value:"Summary | TLDR",id:"summary--tldr",level:2},{value:"How to create",id:"how-to-create",level:3},{value:"How to get the data",id:"how-to-get-the-data",level:3},{value:"How to update",id:"how-to-update",level:3},{value:"Data and view separation | Nesting",id:"data-and-view-separation--nesting",level:3},{value:"Inline frontend objects",id:"inline-frontend-objects",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...l}=e;return(0,r.kt)(p,(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"executables"},"Executables"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"general definition")," will be"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"an isolated container, where the ",(0,r.kt)("a",{parentName:"em",href:"../../frontend/front-end-functions.md"},"defined functions")," can be executed"))),(0,r.kt)("p",null,"In this regard all graphics and dynamic expressions ",(0,r.kt)("strong",{parentName:"p"},"has to be executed inside the container"),". Since it provides an identifier, local memory, stack trace to the expression, that was called. "),(0,r.kt)("p",null,"Containers help to work with the data more efficiently. For example, if we plot a graph using the data that changes with the time, it order to update the graph ",(0,r.kt)("strong",{parentName:"p"},"without reevaluation")," one can find an instance of this executed plotting function and provide a new data to it."),(0,r.kt)("h2",{id:"as-a-pointer"},"As a pointer"),(0,r.kt)("p",null,"Wolfram JS Frontend mostly utilizes containers to store and execute data like ",(0,r.kt)("inlineCode",{parentName:"p"},"Graphics"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," which is binded to the data on the server (Wolfram Kernel) in the first place. But nothing can limit us from using for more general cases. "),(0,r.kt)("p",null,"Each executable has its own unique identifier and can act as a reference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutable["uid"]\n')),(0,r.kt)("p",null,"In the code editor of Wolfram JS Frontend it will immediately cause an execution, when this symbol appears in the line of code. This is a magic of Decorations. However, inside other expressions one can use it purely as a pointer."),(0,r.kt)("p",null,"You can create them from Wolfram Kernel ",(0,r.kt)("strong",{parentName:"p"},"as well as directly from the interpreter")," using following expression "),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"notebook cell")," or directly using ",(0,r.kt)("strong",{parentName:"em"},"wljs interpreter"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[\n    Table[i^2, {i,1,10}],\n    "uid"\n]\n')),(0,r.kt)("p",null,"You can check the data inside by just calling "),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"notebook cell"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'> FrontEndExecutable["uid"]\n> {1,4,9,...}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"using __wljs interpreter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'> FrontEndExecutable["uid"] // Print;\n')),(0,r.kt)("p",null,"Then, you can use it as a reference in some other executable object like"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"notebook cell"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[FrontEndOnly[\n    ListLinePlotly@FrontEndExecutable["uid"]\n]]\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"using __wljs interpreter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndVirtual[{\n    AttachDOM["canvas"],\n    ListLinePlotly@FrontEndExecutable["uid"]\n}]\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[\n    ListLinePlotly@FrontEndRef["uid"]\n]\n')),(0,r.kt)("p",null,"or even like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[\n    ListLinePlotly@FrontEndRef[FrontEndExecutable["uid"]]\n]\n')),(0,r.kt)("p",null,"and since ",(0,r.kt)("inlineCode",{parentName:"p"},"ListLinePlotly")," is a registered object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'ListLinePlotly@FrontEndRef[FrontEndExecutable["uid"]]\n')),(0,r.kt)("p",null,"Here we wrapped the given data into ",(0,r.kt)("inlineCode",{parentName:"p"},"FrontEndOnly"),", that holds the expressions for WL and prevents evaluation of server, leaving the code to be executed on frontend. The latest example instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"FrontEndOnly")," we used ",(0,r.kt)("inlineCode",{parentName:"p"},"FrontEndRef"),", that basically holds ",(0,r.kt)("inlineCode",{parentName:"p"},"FrontEndExecutable")," and prevents it from the evaluation."),(0,r.kt)("p",null,"If you do not want CodeMirror to replace it with a decorations use non-executable synonym "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutable["uid"] -> FrontEndRef["uid"]\n')),(0,r.kt)("p",null,"More about computations like this - see [","[Heterogenesis computation]","]\nAlso check out the tutorial [","[Working with frontend objects]","]"),(0,r.kt)("h3",{id:"mutabillity"},"Mutabillity"),(0,r.kt)("p",null,"Each time you reevaluate the cell content, where the object was created - an Evaluator (",(0,r.kt)("inlineCode",{parentName:"p"},"Kernel/Evaluator.wl"),") fires ",(0,r.kt)("inlineCode",{parentName:"p"},"ExtendDefinitions")," on a master kernel. It compares the new objects to the old data in the Notebook object property and shares the changed objects across all connected clients (associated with the given notebook)."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"See ",(0,r.kt)("inlineCode",{parentName:"p"},"NotebookExtendDefinitions")," function in ",(0,r.kt)("inlineCode",{parentName:"p"},"Kernel/Notebook.wl"),".")),(0,r.kt)("h4",{id:"direct-update-the-fastest"},"Direct update (the fastest)"),(0,r.kt)("p",null,"Sends the data directly to the frontened leaving out the master kernel (see [","[Evaluation]","])"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'SetFrontEndObject["uid",\n    Table[i^3, {i,1,10}]\n]//SendToFrontEnd;\n')),(0,r.kt)("p",null,"or in the same fashion, but prettier "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'SetFrontEndObject[FrontEndExecutable["uid"],\n    Table[i^3, {i,1,10}]\n]//SendToFrontEnd;\n')),(0,r.kt)("p",null,"or even better (WOW)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutable["uid"] = Table[i^3, {i,1,10}]\n')),(0,r.kt)("p",null,"or if you do not want CM6 to draw it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndRef["uid"] = Table[i^3, {i,1,10}]\n')),(0,r.kt)("p",null,"In principle one can send any command and call any function of the frontened by using ",(0,r.kt)("inlineCode",{parentName:"p"},"SendToFrontEnd"),". More info - see [","[Advanced data transfering and visualisation]","]"),(0,r.kt)("h3",{id:"nesting"},"Nesting"),(0,r.kt)("p",null,"One can create a frontend object, that has a reference to another one and etc. The benifits of this approach you will see in ",(0,r.kt)("a",{parentName:"p",href:"#Dynamic%20binding"},"Dynamic binding")," section"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(8257).Z,width:"1164",height:"656"})),(0,r.kt)("p",null,"in the example above it shows how typical ",(0,r.kt)("inlineCode",{parentName:"p"},"Manipulate")," function can be imlemented. In the simples case it has three parts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a slider to control the variables"),(0,r.kt)("li",{parentName:"ul"},"a graphical object (Plot) that shows the results"),(0,r.kt)("li",{parentName:"ul"},"the data, that is provided to the plotting function")),(0,r.kt)("p",null,"and actaully there is a forth one - ",(0,r.kt)("inlineCode",{parentName:"p"},"Panel"),", which holds the first two. All of them are frontend objects. Of course this contruction can be generated automatically"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'slider = Slider[];\n...\nWith[{plot = CreateFrontEndObject[ListLinePlotly[FrontEndRef["data"]], "plot"]},\n    With[{slider = CreateFrontEndObject[slider, "slider"]},\n        CreateFrontEndObject[FrontEndOnly@Panel[{slider, plot}], "panel"]\n    ]\n]\n')),(0,r.kt)("p",null,"or it can be rewritten in a more compact way (if you want to use IDs)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'slider = Slider[];\n...\nCreateFrontEndObject[slider, "slider"];\nCreateFrontEndObject[ListLinePlotly[FrontEndRef["data"]], "plot"];\n\nCreateFrontEndObject[Panel[{FrontEndRef["slider"], FrontEndRef["plot"]}]]\n')),(0,r.kt)("p",null,"the last one goes to the output cell. But sure, you will also need to define a handler for a slider on Wolfram Kernel's side to update ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," object."),(0,r.kt)("h3",{id:"dynamic-binding"},"Dynamic binding"),(0,r.kt)("p",null,"The ideas for WLJS Frontened were inspired by an amazing project ",(0,r.kt)("a",{parentName:"p",href:"https://observablehq.com/@jerryi"},"Observable")," - JS notebook interface working in the browser, where the dynamics was polished perfectly."),(0,r.kt)("p",null,"In Observable all expressions are ",(0,r.kt)("inlineCode",{parentName:"p"},"Dynamic")," in terms of Mathematica by the default. Me, as a maintener (@JerryI) tried to bring it as close as possible to such behaviour, leaving out laggs as possible of Mathematica's frontened."),(0,r.kt)("p",null,"Therefore, ==all frontened objects aka ",(0,r.kt)("inlineCode",{parentName:"p"},"FrontEndExecutable")," are dynamic by the default==. The change in one will cause the updates to ones, which depends on it. This behaviuor is achived by collecting all calls of frontened functions and storing them to special handlers assigned to each frontend object. In principle we do not even need WL Kernel to update the content."),(0,r.kt)("p",null,"Let us try to explain it in following example"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"create such an object")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[ Table[Sin[i]//N, {i,0,2Pi,0.1}] , "myObject"]\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"create a visualiser for it")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[FrontEndOnly[\n  ListLinePlotly[FrontEndExecutable["myObject"]]\n], "visualiser"]\n')),(0,r.kt)("p",null,"The last cell creates another frontend object ",(0,r.kt)("inlineCode",{parentName:"p"},'"visualiser"'),", which depends on the ",(0,r.kt)("inlineCode",{parentName:"p"},'"myObject"'),". ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/JerryI/wljs-interpreter"},"WLJS Interpreter"),' creates a straightforward "link" between them\n$$myObject \\rightarrow visualiser$$\nwhere any changes to ',(0,r.kt)("inlineCode",{parentName:"p"},'"myObject"')," will lead to internal reavaluation (on frontend's side!) of ",(0,r.kt)("inlineCode",{parentName:"p"},"FrontEndOnly")," function and its content, i.e. call somewhere the following"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"make changes directly")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'Do[SetFrontEndObject[FrontEndExecutable["myObject"],\n\n  Table[Sin[i*j]//N, {i,0, 2Pi, 0.1}]\n  \n] // SendToFrontEnd; Pause[0.3];, {j, 1,10}];\n')),(0,r.kt)("p",null,"or with a bit of a syntax sugar available"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'Do[\n    FrontEndExecutable["myObject"] = Table[Sin[i*j]//N, {i,0, 2Pi, 0.1}];\n    Pause[0.3];\n, {j, 10}];\n')),(0,r.kt)("p",null,"After than you will see a nice animation of the output of second cell without actual reevaluation"),(0,r.kt)("p",null,"![","[../imgs/plotly-dynamic.gif]","]"),(0,r.kt)("p",null,"One could argue that this is an actual reevaluation, which might be quite slow. However, during this process ==an additional information to the whole stack of called functions is provided regaring of a type of an update, i.e. restyling, data update, data append and etc==. Therefore, each WLJS function can optimise its behaviour to gain perfomance - see section ",(0,r.kt)("inlineCode",{parentName:"p"},"Methods")," in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/JerryI/wljs-interpreter"},"WLJS Interpreter")," and ",(0,r.kt)("a",{parentName:"p",href:"Frontend%20functions.md"},"Frontend functions")),(0,r.kt)("p",null,"This is a just a top of the surface, the things you can do with it are quite bigger..."),(0,r.kt)("h3",{id:"instancing"},"Instancing"),(0,r.kt)("p",null,"Each call of ",(0,r.kt)("inlineCode",{parentName:"p"},'FrontEndExecutable["uid"]')," creates an instance of the corresponding object with its local memory (see more ",(0,r.kt)("a",{parentName:"p",href:"Frontend%20functions.md"},"Frontend functions"),"). So copying and pasting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutable["myId"] FrontEndExecutable["myId"] FrontEndExecutable["myId"]\n')),(0,r.kt)("p",null,"you will create separate objects connected to the same storage item with ",(0,r.kt)("inlineCode",{parentName:"p"},"uid")," as an identifier."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(6280).Z,width:"1002",height:"499"})),(0,r.kt)("h3",{id:"-applying--injection-arguments"},"\ud83d\udea7 Applying | Injection arguments"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"This feature is still in development"),", however the idea is that sometimes we do not need to create separate ",(0,r.kt)("inlineCode",{parentName:"p"},"FrontEndExecutable")," s to modify one slightly. Therefore one could pass an extra information for the instance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutable["uid", extra arguments...]\n')),(0,r.kt)("p",null,"If it would be possible, one could also add support ",(0,r.kt)("inlineCode",{parentName:"p"},"Function")," symbol to the frontend. And then, we can for sure perform recalculations directly on the frontend! See more in ",(0,r.kt)("a",{parentName:"p",href:"Frontend%20functions.md"},"Frontend functions")),(0,r.kt)("h2",{id:"cheat-sheet"},"Cheat-sheet"),(0,r.kt)("p",null,"for the brief explanation"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(9645).Z,width:"1772",height:"1412"})),(0,r.kt)("h2",{id:"summary--tldr"},"Summary | TLDR"),(0,r.kt)("p",null,"For the best experience - check the tutorial [","[How to work with ]","], which is a real notebook exported from the frontend to a standalone ",(0,r.kt)("inlineCode",{parentName:"p"},".html")," file."),(0,r.kt)("h3",{id:"how-to-create"},"How to create"),(0,r.kt)("p",null,"For the registered types (see ",(0,r.kt)("a",{parentName:"p",href:"Writting%20WebObject.md"},"Writting WebObject"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},"ListLinePlotly[{1,2,3,4,5}]\n")),(0,r.kt)("p",null,"or explicitly assigning a custom id"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[\n    ListLinePlotly[{1,2,3,4,5}],\n    "myId"\n]\n')),(0,r.kt)("p",null,"for you data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[\n    {1,2,3,4,5},\n    "myDataId"\n]\n')),(0,r.kt)("p",null,"In the all cases it returns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'> FrontEndExecutable["myId"]\n> FrontEndExecutable["myDataId"]\n')),(0,r.kt)("h3",{id:"how-to-get-the-data"},"How to get the data"),(0,r.kt)("p",null,"On WL's side it works if there was no wrapper around"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutable["myDataId"][[1]]\n> 1\n')),(0,r.kt)("h3",{id:"how-to-update"},"How to update"),(0,r.kt)("p",null,"Explicitly it can be done by reevaluating the corresponding cell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'CreateFrontEndObject[\n    ListLinePlotly[{1,2,3,4,5}//Reverse],\n    "myId"\n]\n')),(0,r.kt)("p",null,"after the evaluating, all instances of ",(0,r.kt)("inlineCode",{parentName:"p"},'FrontEndExecutable["myId"]')," shown on the screen in any cell will be updated. Check the tutorial ","[W]"," to see it in a better way."),(0,r.kt)("p",null,"But this is slow, direct update is faster"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'SetFrontEndObject["myId", ListLinePlotly[{1,2,3,4,5}//Reverse]] // SendToFrontEnd;\n')),(0,r.kt)("p",null,"this is also valid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'SetFrontEndObject[FrontEndExecutable["myId"], ListLinePlotly[{1,2,3,4,5}//Reverse]] // SendToFrontEnd;\n')),(0,r.kt)("p",null,"and this is too"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutable["myId"] = ListLinePlotly[{1,2,3,4,5}//Reverse];\n')),(0,r.kt)("p",null,"and this is too"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndRef["myId"] = ListLinePlotly[{1,2,3,4,5}//Reverse];\n')),(0,r.kt)("h3",{id:"data-and-view-separation--nesting"},"Data and view separation | Nesting"),(0,r.kt)("p",null,"To update the data separately from the plotting function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'ListLinePlotly[FrontEndRef[FrontEndExecutable["myDataId"]]]\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'ListLinePlotly[FrontEndRef["myDataId"]]\n')),(0,r.kt)("p",null,"Then you can update the data only"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutable["myDataId"] = RandomReal[{-1,1}, 4];\n')),(0,r.kt)("p",null,"or attach a slider to it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'slider = Slider[0,1,0.1];\nFunction[x, FrontEndExecutable["myDataId"] = x RandomReal[{-1,1}, 4]] // slider;\n\nslider\n')),(0,r.kt)("h2",{id:"inline-frontend-objects"},"Inline frontend objects"),(0,r.kt)("p",null,"\ud83d\udea7 Not implemented!\nOne can compress small objects in way like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mathematica"},'FrontEndExecutableInline["Compressed JSON expression"]\n')))}u.isMDXComponent=!0},6280:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/intancing.excalidraw-740bed8824dbb7180e90d9efbd8c61d7.svg"},8257:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/manipulate-frontend-example.excalidraw-44cc6f3f8daedf7cf172282b0046ab97.svg"},9645:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/working-with-frontend-object.excalidraw-5f40e4d2dcb9d18814023e021aaf1ead.svg"}}]);