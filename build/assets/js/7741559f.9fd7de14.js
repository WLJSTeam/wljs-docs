"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[84734],{4744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(17624),o=t(4552);const a={},s=void 0,i={id:"frontend/Importing/Markdown",title:"Markdown",description:"Turn plain Markdown to WLJS Notebook",source:"@site/docs/frontend/Importing/Markdown.md",sourceDirName:"frontend/Importing",slug:"/frontend/Importing/Markdown",permalink:"/wljs-docs/frontend/Importing/Markdown",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1736628819e3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HTML",permalink:"/wljs-docs/frontend/Importing/HTML"},next:{title:"Mathematica",permalink:"/wljs-docs/frontend/Importing/Mathematica"}},d={},c=[];function l(e){const n={a:"a",code:"code",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Turn plain Markdown to WLJS Notebook"})}),"\n",(0,r.jsxs)(n.p,{children:["Once exported to a ",(0,r.jsx)(n.code,{children:".md"})," file - ",(0,r.jsx)(n.a,{href:"/wljs-docs/frontend/Exporting/Markdown",children:"Markdown"}),", a notebook can be ",(0,r.jsx)(n.strong,{children:"converted back to a normal notebook"})," once opened using WLJS Notebook app. Place ",(0,r.jsx)(n.code,{children:".md"})," file to the project folder and open it."]}),"\n",(0,r.jsx)(n.p,{children:"For example here is a Markdown note with a mixture Javascript and WL"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",metastring:'title="Test.md"',children:"# Connecting external Javascript library \n## How to make interactive 3D Force-Directed Graphs\n\nThere is an amazing [Javascript library](https://github.com/vasturiano/3d-force-graph) for building 3D force graphs using THREE.js. \n\nWe can build it into a standlone module for our notebooks using ESM cells. But firstly, lets fetch this library using NPM\n```sh\nnpm i 3d-force-graph\n```\nNow define our function. WLJS Notebook has a system of shared Javascript libraries, which already provides some of the dependencies.\n```esm\nimport ForceGraph3D from '3d-force-graph';\n\ncore.ForceGraph3D = async (args, env) => { \n  //load shared library from WLJS Notebook store\n  await interpretate.shared.SpriteText.load();\n  //interprete input data\n  const data = await interpretate(args[0], env);\n\n  const SpriteText = interpretate.shared.SpriteText.SpriteText;\n  const opts = await core._getRules(args, env);\n\n  // Build labels mapping\n  const labels = (opts.VertexLabels || []).reduce((acc, { lhs, rhs }) => {\n    acc[lhs] = rhs;\n    return acc;\n  }, {});\n\n  // Collect node IDs and construct links\n  const nodeIds = new Set();\n  const links = data.map(({ lhs, rhs }) => {\n    nodeIds.add(lhs);\n    nodeIds.add(rhs);\n    return { source: String(rhs), target: String(lhs) };\n  });\n\n  // Create nodes with labels\n  const nodes = Array.from(nodeIds).map(id => ({\n    id: String(id),\n    label: labels[id] || String(id),\n  }));\n\n  let imageSize = (opts.ImageSize) || 350;\n\n  if (!Array.isArray(imageSize)) {\n    imageSize = [imageSize, imageSize * 0.7];\n  }\n\n  // Initialize the 3D force graph\n  const Graph = ForceGraph3D({})(env.element)\n    .width(imageSize[0])\n    .height(imageSize[1])\n    .cooldownTicks(100)\n    .graphData({ nodes, links })\n    .nodeThreeObject(node => {\n      const sprite = new SpriteText(node.label);\n      sprite.material.depthWrite = true; // Make sprite background transparent\n      sprite.color = 'white';\n      sprite.textHeight = 12;\n      return sprite;\n    })\n    .nodeThreeObjectExtend(false);\n\n  // Apply optional charge strength\n  if ('Charge' in opts) {\n    Graph.d3Force('charge').strength(opts.Charge);\n  }\n\n  Graph.onEngineStop(() => Graph.zoomToFit(400));\n\n  env.local.Graph = Graph;\n};\n\ncore.ForceGraph3D.destroy = () => {\n  console.warn('3D graph was removed');\n}\n\n//make each instance unique\ncore.ForceGraph3D.virtual = true  \n```\nNote, ==you don't need to compile and reevaluate the cell above== an invisible output cell stores JS module in this notebook.\n\nNow we need to register this symbol in Wolfram Language\n```wolfram\nForceGraph3D /: MakeBoxes[f_ForceGraph3D, StandardForm] := With[{\n  \n  o = CreateFrontEndObject[f] \n},\n  \n  ViewBox[o, o]\n]\n```\n## Testing\nLet us make a simple graph\n```wolfram\nForceGraph3D[{\n  1->2, 2->3, 3->4, 4->2, 3->5\n}, \"VertexLabels\"->{1->\"one\", 4->\"four\", 5->\"five\"}, ImageSize->500]\n```\nTry to drag around the nodes.\n\nMore nodes!\n```wolfram\nwords = DictionaryLookup[\"pea*\"];\nFlatten[Map[(Thread[# -> \n       DeleteCases[Nearest[words, #, 3], #]]) &, words]];\n\nForceGraph3D[%, ImageSize->500]\n```\n"})}),"\n",(0,r.jsxs)(n.p,{children:["All code cells will be converted to ",(0,r.jsx)(n.a,{href:"/wljs-docs/frontend/Cell%20types/Input%20cell",children:"Input cell"}),", while plain text will be turned into ",(0,r.jsx)(n.a,{href:"/wljs-docs/frontend/Cell%20types/Markdown",children:"Markdown"})," cells with hidden input."]}),"\n",(0,r.jsx)(n.p,{children:"Let's open this in WLJS Notebook"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(89440).c+"",width:"1228",height:"809"})})]})}function p(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},89440:(e,n,t)=>{t.d(n,{c:()=>r});const r=t.p+"assets/images/Screenshot 2024-12-19 at 19.21.16-26e61470cf85579e7475dcda4e04b7bf.png"},4552:(e,n,t)=>{t.d(n,{I:()=>i,M:()=>s});var r=t(11504);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);