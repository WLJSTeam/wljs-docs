"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[36957],{2251:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/GOL-ezgif.com-optimize-d54877409dae30e81d0b22ccde1a57bf.gif"},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var a=r(96540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}},33910:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(74848),t=r(28453);const i={draft:!1},s=void 0,o={id:"frontend/Advanced/Frontend interpretation/WLJS Functions",title:"WLJS Functions",description:"Quick and Dirty",source:"@site/docs/frontend/Advanced/Frontend interpretation/WLJS Functions.md",sourceDirName:"frontend/Advanced/Frontend interpretation",slug:"/frontend/Advanced/Frontend interpretation/WLJS Functions",permalink:"/frontend/Advanced/Frontend interpretation/WLJS Functions",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1748456224e3,frontMatter:{draft:!1},sidebar:"tutorialSidebar",previous:{title:"Frontend Objects",permalink:"/frontend/Advanced/Frontend interpretation/Frontend Objects"},next:{title:"Custom attributes",permalink:"/frontend/Advanced/Graphics/Custom attributes"}},l={},c=[{value:"Quick and Dirty",id:"quick-and-dirty",level:2},{value:"A Deeper Look",id:"a-deeper-look",level:2},{value:"Simple Direct Call",id:"simple-direct-call",level:3},{value:"\ud83c\udfa1 Example 1: Game of Life",id:"-example-1-game-of-life",level:5},{value:"A Remark About Subsymbols | Methods",id:"a-remark-about-subsymbols--methods",level:4},{value:"Contexts",id:"contexts",level:4},{value:"Virtualization",id:"virtualization",level:3},{value:"Properties",id:"properties",level:4},{value:"\ud83c\udfa1 Example 2: Clocks",id:"-example-2-clocks",level:5},{value:"Default Methods",id:"default-methods",level:4},{value:"A Note on Packed and Numeric Arrays",id:"a-note-on-packed-and-numeric-arrays",level:4},{value:"\ud83c\udfa1 Example 3: Game of Life (Improved)",id:"-example-3-game-of-life-improved",level:5},{value:"Dynamic Symbols",id:"dynamic-symbols",level:4},{value:"Injection into a Virtual Instance",id:"injection-into-a-virtual-instance",level:4},{value:"\ud83c\udfa1 Example with Lines",id:"-example-with-lines",level:5},{value:"Frontend Objects",id:"frontend-objects",level:4}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"quick-and-dirty",children:"Quick and Dirty"}),"\n",(0,a.jsxs)(n.p,{children:["Create a new cell, then define a function inside the ",(0,a.jsx)(n.code,{children:"core"})," ",(0,a.jsx)(n.a,{href:"/interpreter/Advanced/architecture",children:"context"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:".js\ncore.MyFunction = async (args, env) => {\n  const data = await interpretate(args[0], env);\n  alert(data);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"To call it directly from the Wolfram Kernel, use:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:'MyFunction["Hello World!"] // FrontSubmit;\n'})}),"\n",(0,a.jsx)(n.p,{children:"Or in the cell's output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:'CreateFrontEndObject[MyFunction["Hello World!"]]\n'})}),"\n",(0,a.jsx)(n.p,{children:"This should produce a pop-up message with the given text."}),"\n",(0,a.jsx)(n.h2,{id:"a-deeper-look",children:"A Deeper Look"}),"\n",(0,a.jsx)(n.p,{children:"First, one needs to understand how the function is called. There are a few different ways:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Direct calls (as shown above)"}),"\n",(0,a.jsx)(n.li,{children:"Indirect calls using containers"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The first one is straightforward, and most UI and core built-in functions are written this way."}),"\n",(0,a.jsx)(n.h3,{id:"simple-direct-call",children:"Simple Direct Call"}),"\n",(0,a.jsx)(n.p,{children:"As simple as this:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:r(64815).A+"",width:"677",height:"177"})}),"\n",(0,a.jsxs)(n.p,{children:["A called function has no persistent memory (call and forget), except for the ",(0,a.jsx)(n.code,{children:"env"})," variable, which can share data with other functions in the same subtree."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Any defined function must return a JavaScript object or nothing."}),"\nArguments (",(0,a.jsx)(n.code,{children:"args"}),") are always Wolfram Expressions, so use ",(0,a.jsx)(n.code,{children:"interpretate"})," to convert them into JavaScript data types."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, ",(0,a.jsx)(n.code,{children:"env"})," is very handy when working with graphics:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.RGBColor = async (args, env) => {\n  const r = await interpretate(args[0], env);\n  const g = await interpretate(args[1], env);\n  const b = await interpretate(args[2], env);\n\n  // Modify env\n  env.color = new whatever.Color(r, g, b);\n\n  // Return in case it's used directly\n  return env.color;\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can then call ",(0,a.jsx)(n.code,{children:"core.RGBColor"})," somewhere in a list:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"{Blue[], {Red[], Sphere[] (* I am red *)}, Cuboid[] (* I am blue *)} // Graphics3D\n"})}),"\n",(0,a.jsx)(n.p,{children:"In the parent function:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.Graphics3D = async (args, env) => {\n  ...\n  const scene = {};\n  await interpretate(args[0], { ...env, scene });\n  rendered.add(scene); // All objects are there!\n};\n\ncore.Sphere = async (args, env) => {\n  ...\n  env.scene.add(new sphere({ color: env.color }));\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"Thus, the desired data ends up in the scene. This is the power of pointers."}),"\n",(0,a.jsx)(n.h5,{id:"-example-1-game-of-life",children:"\ud83c\udfa1 Example 1: Game of Life"}),"\n",(0,a.jsx)(n.p,{children:"To have a bit of fun, let's define some supporting structures."}),"\n",(0,a.jsx)(n.p,{children:"Create a new cell with the following code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="cell 1"',children:'.js\n// Create JS canvas\nconst canvas = document.createElement("canvas");\ncanvas.width = 400;\ncanvas.height = 400;\n\nlet context = canvas.getContext("2d");\ncontext.fillStyle = "lightgray";\ncontext.fillRect(0, 0, 500, 500);\n\n// An array to store the previous state\nlet old = new Array(40);\nfor (let i = 0; i < old.length; i++) {\n  old[i] = new Array(40).fill(0); \n}\n\n// A function to draw on it\ncore.MyFunction = async (args, env) => {\n  const data = await interpretate(args[0], env);\n\n  // Draw our boxes\n  for (let i = 0; i < 40; ++i) {\n    for (let j = 0; j < 40; ++j) {\n      // Old pixels leave blue traces\n      if (old[i][j] > 0) {\n        context.fillStyle = "rgba(0,0,255,0.2)"; \n        context.fillRect(i * 10 + 2, j * 10 + 2, 6, 6);\n      }\n      // New pixels\n      if (data[i][j] > 0) {\n        context.fillStyle = "rgba(255,0,0,0.4)"; \n        context.fillRect(i * 10 + 1, j * 10 + 1, 8, 8);\n      } else {\n        context.fillStyle = "rgba(255,255,255,0.4)"; \n        context.fillRect(i * 10 + 1, j * 10 + 1, 8, 8);\n      }\n\n      // Store the previous frame\n      old[i][j] = data[i][j];\n    }\n  }\n};\n\nreturn canvas;\n'})}),"\n",(0,a.jsx)(n.p,{children:"This function will draw a 40x40 array of 1 and 0 pixels on the page. Let's try it out with a typical cellular automaton like Conway's Game of Life:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",metastring:'title="cell 2"',children:"gameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, {1, 1}};\nboard = RandomInteger[1, {40, 40}];\nDo[\n  board = CellularAutomaton[gameOfLife, board, {{0, 1}}] // Last;\n  MyFunction[board] // FrontSubmit;\n  Pause[0.1];\n, {i, 1, 100}]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The output is shown in the GIF below, but you can try it yourself by opening ",(0,a.jsx)(n.code,{children:"GOL.wln"})," from the examples folder."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["See more about JS cells in ",(0,a.jsx)(n.a,{href:"Cell%20types.md",children:"Cell Types"})]})}),"\n",(0,a.jsx)(n.p,{children:"Of course, this is not the most efficient way to make animations. A better method would be to let JS run the animation on its own and wait for or request new data using a system of events."}),"\n",(0,a.jsx)(n.h4,{id:"a-remark-about-subsymbols--methods",children:"A Remark About Subsymbols | Methods"}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes a function or a tree of functions is called in response to some event. This information is stored in ",(0,a.jsx)(n.code,{children:"env.method"}),". See also ",(0,a.jsx)(n.a,{href:"../../../../interpreter/Advanced/symbols.md",children:"Symbols"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If there is a data update, i.e. ",(0,a.jsx)(n.code,{children:"env.method = 'update'"}),", then the interpreter will try to find a subsymbol or function to call (read more about how the interpreter handles them in ",(0,a.jsx)(n.a,{href:"https://github.com/JerryI/wljs-interpreter",children:"WLJS Interpreter"}),")."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:r(64159).A+"",width:"714",height:"192"})}),"\n",(0,a.jsx)(n.p,{children:"Imagine if every defined function was like a class with a constructor and methods (subsymbols):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.MyFunction = (args, env) => {}\n\ncore.MyFunction.update = (args, env) => {}\ncore.MyFunction.destroy = (args, env) => {}\ncore.MyFunction.whatever = (args, env) => {}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then, you can specify which method to call during evaluation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.OurParentFunction = (args, env) => {\n  const data = interpretate(args[0], { ...env, method: 'update' });\n  ...\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"This is extremely useful for updating graphs or plots. Instead of redrawing everything, you can perform lightweight operations:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.ListLinePlotly = (args, env) => {\n  // Create the element, draw axes, etc... (SLOW)\n  Plotly.newPlot(...);\n};\n\ncore.ListLinePlotly.update = (args, env) => {\n  // Quickly redraw only changed elements\n  Plotly.animate(...) or extend...\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.strong,{children:["Destroy and update methods are usually features of ",(0,a.jsx)(n.a,{href:"#Containers%20Executables",children:"Virtual Functions"}),"."]})}),"\n",(0,a.jsx)(n.h4,{id:"contexts",children:"Contexts"}),"\n",(0,a.jsx)(n.p,{children:"To prevent name collisions and clutter, you can specify a context (or library) of symbols using:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'var library = {};\nlibrary.name = "It is important to write a name";\ninterpretate.extendContext(library);\n\nlibrary.Symbol = (args, env) => {\n  // ...\n};\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The interpreter will check all available contexts and ",(0,a.jsx)(n.strong,{children:"use the first match"}),". However, you ",(0,a.jsx)(n.strong,{children:"can prioritize the context"})," by providing it in the ",(0,a.jsx)(n.code,{children:"env"})," object:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.GrantSymbol = (args, env) => {\n  const data = interpretate(args, { ...env, context: library });\n  // ...\n  // First match should be in the `library` object\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you have multiple prioritized contexts, you ",(0,a.jsx)(n.strong,{children:"can pass them as an array"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.GrantSymbol = (args, env) => {\n  const data = interpretate(args, { ...env, context: [library1, library2] });\n  // ...\n  // First match in `library1`, if not found, then in `library2`, and finally in the `core` context\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"virtualization",children:"Virtualization"}),"\n",(0,a.jsxs)(n.p,{children:["Each time the interpreter encounters a virtual function (or call it a symbol), it creates a unique object that scopes the ",(0,a.jsx)(n.code,{children:"env"})," variable and provides local memory for all Wolfram Expressions located inside the container."]}),"\n",(0,a.jsx)(n.p,{children:"The interpreter can automatically create a container for any WLJS symbol when it sees a special property defined:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.MySymbol.virtual = true;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then ",(0,a.jsx)(n.code,{children:"MySymbol"})," takes advantage of virtualization behavior, even if it\u2019s called anonymously via ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Frontend%20IO/FrontSubmit",children:"FrontSubmit"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The most important features of virtual functions:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["They can be ",(0,a.jsx)(n.strong,{children:"destroyed"})," or ",(0,a.jsx)(n.strong,{children:"updated"})," (see ",(0,a.jsx)(n.a,{href:"#a-remark-about-subsymbols--methods",children:"Subsymbols | Methods"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:["They automatically bind to child virtual functions instances, enabling reevaluation when changes are made in children (foundation for ",(0,a.jsx)(n.a,{href:"/frontend/Dynamics",children:"Dynamics"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,a.jsxs)(n.p,{children:["Virtualized execution is powerful because each call creates a separate instance with local memory. The ",(0,a.jsx)(n.code,{children:"env"})," variable provides access to:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.MyFunction = (args, env) => {\n  env.local    // local memory for this instance\n  env.global   // global memory for the call tree\n  env.exposed  // memory shared outside the instance\n  env          // sharable memory within the instance and its children\n};\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Global memory"})," is created with each widget or scope via ",(0,a.jsx)(n.code,{children:"FrontSubmit"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Local memory"})," is specific to each instance."]}),"\n",(0,a.jsxs)(n.li,{children:["When executed in the output cell (aka ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Formatting/Low-level/ViewBox",children:"ViewBox"}),") or on a slide, ",(0,a.jsx)(n.code,{children:"env.element"})," provides access to the DOM placeholder."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Let\u2019s look at an example using local memory:"}),"\n",(0,a.jsx)(n.h5,{id:"-example-2-clocks",children:"\ud83c\udfa1 Example 2: Clocks"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:".js\ncore.PlaceholderClock = async (args, env) => {\n  env.local.start = new Date();\n  env.local.clock = setInterval(() => {\n    const d = new Date() - env.local.start;\n    env.element.innerHTML = d;\n  }, 10);\n};\n\ncore.PlaceholderClock.destroy = async (args, env) => {\n  clearInterval(env.local.clock);\n  const passed = new Date() - env.local.start;\n  alert(`${passed}ms passed`);\n};\n\ncore.PlaceholderClock.virtual = true;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then we can use it like this using ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Formatting/Low-level/ViewBox",children:"ViewBox"})," to execute Javascript"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"PlaceholderClock /: MakeBoxes[p_PlaceholderClock, StandardForm] := ViewBox[p, p];\n\nPlaceholderClock[]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here the first argument of ",(0,a.jsx)(n.code,{children:"ViewBox"})," is actual input form of the expression, while the second one will be used to render the view, which covers input form in the editor."]}),"\n",(0,a.jsxs)(n.p,{children:["Copy/paste it across cells. When you delete a widget, ",(0,a.jsx)(n.code,{children:".destroy"})," runs and stops the clock showing a pop up message"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:r(76761).A+"",width:"414",height:"52"})}),"\n",(0,a.jsxs)(n.p,{children:["This is especially useful for things like ",(0,a.jsx)(n.code,{children:"Graphics3D"}),", where a rendering function might run 60 times per second. You don\u2019t want it to keep running if the widget is removed:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.Graphics3D.destroy = async (args, env) => {\n  cancelAnimationFrame(env.local.aid);\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"default-methods",children:"Default Methods"}),"\n",(0,a.jsxs)(n.p,{children:["Users can define their own subsymbols (methods) via ",(0,a.jsx)(n.code,{children:"env.method"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"For container-based functions, you should define these:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".destroy"})," \u2014 triggered when a widget is removed (runs top-down)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".update"})," \u2014 triggered when data changes (runs bottom-up)"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"core.MyFunction.update = async (args, env) => {};\ncore.MyFunction.destroy = async (args, env) => {};\n"})}),"\n",(0,a.jsx)(n.p,{children:"Without these, deleting a widget can cause errors."}),"\n",(0,a.jsx)(n.h4,{id:"a-note-on-packed-and-numeric-arrays",children:"A Note on Packed and Numeric Arrays"}),"\n",(0,a.jsxs)(n.p,{children:["When sending large chunks of numeric data, the Wolfram Kernel may use ",(0,a.jsx)(n.code,{children:"PackedArray"}),", which becomes a ",(0,a.jsx)(n.code,{children:"NumericArrayObject"})," in JavaScript (a wrapper for ",(0,a.jsx)(n.code,{children:"TypedArray"}),")."]}),"\n",(0,a.jsx)(n.p,{children:"Always check for this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"let data = await interpretate(args[0], env);\nif (data instanceof NumericArrayObject) {\n  // handle TypedArray\n} else {\n  // handle normal array\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can convert to a normal JS array with:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"data = data.normal();\n"})}),"\n",(0,a.jsx)(n.h5,{id:"-example-3-game-of-life-improved",children:"\ud83c\udfa1 Example 3: Game of Life (Improved)"}),"\n",(0,a.jsx)(n.p,{children:"Let\u2019s enhance our animation with containers:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'.js\ncore.MyFunction = async (args, env) => {\n  let data = await interpretate(args[0], env);\n  if (data instanceof NumericArrayObject) {\n    data = data.normal();\n  }\n  //we are not going to use data here \n  //only needs for dynamic link between child and parent\n\n  const canvas = document.createElement("canvas");\n  canvas.width = 400;\n  canvas.height = 400;\n\n  let context = canvas.getContext("2d");\n  context.fillStyle = "lightgray";\n  context.fillRect(0, 0, 500, 500);\n\n  let old = new Array(40);\n  for (let i = 0; i < old.length; i++) {\n    old[i] = new Array(40).fill(0);\n  }\n\n  env.element.appendChild(canvas);\n  env.local.old = old;\n  env.local.ctx = context;\n};\n\ncore.MyFunction.virtual = true;\n'})}),"\n",(0,a.jsx)(n.p,{children:"Update method:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'.js\ncore.MyFunction.update = async (args, env) => {\n  let data = await interpretate(args[0], env);\n  if (data instanceof NumericArrayObject) {\n    data = data.normal();\n  }\n  //now we are using data\n\n  const context = env.local.ctx;\n  for (let i = 0; i < 40; ++i) {\n    for (let j = 0; j < 40; ++j) {\n      if (env.local.old[i][j] > 0) {\n        context.fillStyle = "rgba(0,0,255,0.2)";\n        context.fillRect(i * 10 + 2, j * 10 + 2, 6, 6);\n      }\n      if (data[i][j] > 0) {\n        context.fillStyle = "rgba(255,0,0,0.4)";\n        context.fillRect(i * 10 + 1, j * 10 + 1, 8, 8);\n      } else {\n        context.fillStyle = "rgba(255,255,255,0.4)";\n        context.fillRect(i * 10 + 1, j * 10 + 1, 8, 8);\n      }\n    }\n  }\n  env.local.old = data;\n};\n\ncore.MyFunction.destroy = (args, env) => {};\n'})}),"\n",(0,a.jsx)(n.p,{children:"Let us try to use it with a defined output forms"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"gameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, {1, 1}};\nboard = RandomInteger[1, {40, 40}];\n\nMyFunction /: MakeBoxes[m_MyFunction, StandardForm | WLXForm] := ViewBox[m,m]\n"})}),"\n",(0,a.jsx)(n.p,{children:"and then create out first instance"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"MyFunction[board]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["It will show you a blank gray screen, since ",(0,a.jsx)(n.code,{children:"core.MyFunction"})," only draws the data when it changes. To bind ",(0,a.jsx)(n.code,{children:"MyFunction"})," to ",(0,a.jsx)(n.code,{children:"board"})," symbol, we need to hold the last one from the evaluation. This can be done using ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Interpreter/Offload",children:"Offload"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"MyFunction[board // Offload]\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["See more about it in ",(0,a.jsx)(n.a,{href:"#Dynamic%20Symbols",children:"Dynamic Symbols"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["When ",(0,a.jsx)(n.code,{children:"board"})," changes:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"Do[\n  board = CellularAutomaton[gameOfLife, board, {{0, 1}}] // Last;\n  Pause[0.1];\n, {i, 1, 100}]\n"})}),"\n",(0,a.jsx)(n.p,{children:"All instances update live! Even if you copy and paste the same expressions, its display will be unique"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:r(2251).A+"",width:"600",height:"294"})}),"\n",(0,a.jsx)(n.h4,{id:"dynamic-symbols",children:"Dynamic Symbols"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["As one could see from the previous example ",(0,a.jsx)(n.code,{children:"board"})," symbol triggers update of our GOL canvas. ",(0,a.jsx)(n.code,{children:"board"})," can be classified exactly as ",(0,a.jsx)(n.code,{children:"dynamic symbol"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Any defined Wolfram Language symbol with an ",(0,a.jsx)(n.code,{children:"OwnValue"})," like:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"radius = 1;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Wrapped in ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Interpreter/Offload",children:"Offload"})," becomes a ",(0,a.jsx)(n.code,{children:"core.radius"})," virtual symbol:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"Graphics[Disk[{0., 0.}, Offload[radius]]]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The Kernel tracks changes to ",(0,a.jsx)(n.code,{children:"OwnValues"}),", so if ",(0,a.jsx)(n.code,{children:"Disk"})," is also virtual, both are coupled. For example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"EventHandler[InputRange[0, 1, 0.1], Function[r, radius = r]]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Will trigger ",(0,a.jsx)(n.code,{children:".update"})," on ",(0,a.jsx)(n.code,{children:"Disk"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"injection-into-a-virtual-instance",children:"Injection into a Virtual Instance"}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes you want to add new objects into an existing instance (like a ",(0,a.jsx)(n.code,{children:"Graphics"})," scene) without reevaluating everything. You can do this using ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Frontend%20IO/FrontInstanceReference",children:"FrontInstanceReference"})," + ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Frontend%20IO/FrontSubmit",children:"FrontSubmit"}),"."]}),"\n",(0,a.jsx)(n.h5,{id:"-example-with-lines",children:"\ud83c\udfa1 Example with Lines"}),"\n",(0,a.jsx)(n.p,{children:"Create a reference to an instance:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"ref = FrontInstanceReference[];\nPlot[x, {x, 0, 1}, Epilog -> {ref}]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then inject a new object:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"FrontSubmit[Line[{{0.2, 0.6}, {0.1, 0.5}}], ref]\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Frontend%20IO/FrontSubmit",children:"FrontSubmit"})," and ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Frontend%20IO/FrontInstanceReference",children:"FrontInstanceReference"})," for more."]})}),"\n",(0,a.jsx)(n.h4,{id:"frontend-objects",children:"Frontend Objects"}),"\n",(0,a.jsxs)(n.p,{children:["If you copy and paste any expressions from the given examples to a normal text editor, it will reveal ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Formatting/InputForm",children:"InputForm"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'(*VB[*)(MyFunction[Offload[board]])(*,*)(*"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeF5DwrXQrzUsuyczPg4ixAwn/tLSc/MSUYlYgOyk/sSgFAL6LDrY="*)(*]VB*)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["What if the inner expressions are too big to be displayed? For example ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Graphics3D/",children:"Graphics3D"})," can include 10000 of polygons. To cope with this problem you can wrap it into ",(0,a.jsx)(n.a,{href:"/frontend/Advanced/Frontend%20interpretation/Frontend%20Objects",children:"Frontend Objects"}),", i.e."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"MyFunction /: MakeBoxes[m_MyFunction, StandardForm | WLXForm] := With[{\n\to = CreateFrontEndObject[m]\n}, \n\tViewBox[Null, o]\n]\n"})}),"\n",(0,a.jsx)(n.p,{children:"then you get"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'(*VB[*)(Null)(*,*)(*"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJ5oaGBukpBnomlqYGOmapFgY6CZamJnoGllYmJukGRqkWpqaAAB12BS3"*)(*]VB*)\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"expression is compressed to JSON and will be loaded via separate channel"}),"\n",(0,a.jsxs)(n.li,{children:["expression no longer keeps its original form and will return ",(0,a.jsx)(n.code,{children:"Null"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To improve this situation, one can use a standard form of ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Frontend%20Objects/FrontEndExecutable",children:"FrontEndExecutable"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mathematica",children:"MyFunction /: MakeBoxes[m_MyFunction, form: StandardForm | WLXForm] := With[{\n\to = CreateFrontEndObject[m]\n}, \n\tMakeBoxes[o, form]\n]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then we get"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'(*VB[*)(FrontEndRef["382744b2-d98e-49ef-9858-d15675873a2b"])(*,*)(*"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKG1sYmZuYJBnpplhapOqaWKam6VpamFrophiampmbWpgbJxolAQB3iBUG"*)(*]VB*)\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"expression is compressed to JSON and will be loaded via separate channel"}),"\n",(0,a.jsxs)(n.li,{children:["expression keeps its original form, since ",(0,a.jsx)(n.a,{href:"/frontend/Reference/Frontend%20Objects/FrontEndRef",children:"FrontEndRef"})," directly points to the internal storage of the original expression"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},64159:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/Simple call 2dn.excalidraw-c5025387f981c35acf492720c249103a.svg"},64815:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/Simple call.excalidraw-fb15dcf006eec2792c01f712dae68003.svg"},76761:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/Screen Recording 2023-04-09 at 18.43.08-a597efb1076d5ee589dcdeba05b42e29.gif"}}]);