"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[14183],{2887:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/Screenshot 2024-12-19 at 19.21.16-26e61470cf85579e7475dcda4e04b7bf.png"},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(96540);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},30558:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=r(74848),o=r(28453);const a={},i="Markdown",s={id:"frontend/Importing/Markdown",title:"Markdown",description:"Turn plain Markdown into a WLJS Notebook",source:"@site/docs/frontend/Importing/Markdown.md",sourceDirName:"frontend/Importing",slug:"/frontend/Importing/Markdown",permalink:"/frontend/Importing/Markdown",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1743582564e3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HTML",permalink:"/frontend/Importing/HTML"},next:{title:"Mathematica",permalink:"/frontend/Importing/Mathematica"}},d={},c=[];function l(e){const n={a:"a",code:"code",h1:"h1",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"markdown",children:"Markdown"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Turn plain Markdown into a WLJS Notebook"})}),"\n",(0,t.jsxs)(n.p,{children:["Once exported to a ",(0,t.jsx)(n.code,{children:".md"})," file using ",(0,t.jsx)(n.a,{href:"/frontend/Exporting/Markdown",children:"Markdown"}),", a notebook can be ",(0,t.jsx)(n.strong,{children:"converted back into a regular notebook"})," when opened in the WLJS Notebook app. Simply place the ",(0,t.jsx)(n.code,{children:".md"})," file in your project folder and open it."]}),"\n",(0,t.jsx)(n.p,{children:"For example, here\u2019s a Markdown note that mixes JavaScript and Wolfram Language:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",metastring:'title="Test.md"',children:"# Connecting External JavaScript Library\n## How to Make Interactive 3D Force-Directed Graphs\n\nThere is an amazing [JavaScript library](https://github.com/vasturiano/3d-force-graph) for building 3D force-directed graphs using THREE.js.\n\nWe can build it into a standalone module for our notebooks using ESM cells. But first, let's fetch this library using NPM:\n\n```sh\nnpm i 3d-force-graph\n```\n\nNow define our function. WLJS Notebook has a system of shared JavaScript libraries, which already includes some dependencies.\n\n```esm\nimport ForceGraph3D from '3d-force-graph';\n\ncore.ForceGraph3D = async (args, env) => {\n  await interpretate.shared.SpriteText.load();\n  const data = await interpretate(args[0], env);\n\n  const SpriteText = interpretate.shared.SpriteText.SpriteText;\n  const opts = await core._getRules(args, env);\n\n  const labels = (opts.VertexLabels || []).reduce((acc, { lhs, rhs }) => {\n    acc[lhs] = rhs;\n    return acc;\n  }, {});\n\n  const nodeIds = new Set();\n  const links = data.map(({ lhs, rhs }) => {\n    nodeIds.add(lhs);\n    nodeIds.add(rhs);\n    return { source: String(rhs), target: String(lhs) };\n  });\n\n  const nodes = Array.from(nodeIds).map(id => ({\n    id: String(id),\n    label: labels[id] || String(id),\n  }));\n\n  let imageSize = opts.ImageSize || 350;\n  if (!Array.isArray(imageSize)) {\n    imageSize = [imageSize, imageSize * 0.7];\n  }\n\n  const Graph = ForceGraph3D({})(env.element)\n    .width(imageSize[0])\n    .height(imageSize[1])\n    .cooldownTicks(100)\n    .graphData({ nodes, links })\n    .nodeThreeObject(node => {\n      const sprite = new SpriteText(node.label);\n      sprite.material.depthWrite = true;\n      sprite.color = 'white';\n      sprite.textHeight = 12;\n      return sprite;\n    })\n    .nodeThreeObjectExtend(false);\n\n  if ('Charge' in opts) {\n    Graph.d3Force('charge').strength(opts.Charge);\n  }\n\n  Graph.onEngineStop(() => Graph.zoomToFit(400));\n\n  env.local.Graph = Graph;\n};\n\ncore.ForceGraph3D.destroy = () => {\n  console.warn('3D graph was removed');\n};\n\ncore.ForceGraph3D.virtual = true;\n```\n\nNote: ==You don\u2019t need to recompile or reevaluate the cell above== \u2014 an invisible output cell stores the JS module within the notebook.\n\nNow we need to register this symbol in Wolfram Language:\n\n```wolfram\nForceGraph3D /: MakeBoxes[f_ForceGraph3D, StandardForm] := With[{\n  o = CreateFrontEndObject[f]\n},\n  ViewBox[o, o]\n]\n```\n\n## Testing\nLet\u2019s create a simple graph:\n\n```wolfram\nForceGraph3D[{\n  1 -> 2, 2 -> 3, 3 -> 4, 4 -> 2, 3 -> 5\n}, \"VertexLabels\" -> {1 -> \"one\", 4 -> \"four\", 5 -> \"five\"}, ImageSize -> 500]\n```\n\nTry dragging the nodes around.\n\nMore nodes!\n\n```wolfram\nwords = DictionaryLookup[\"pea*\"];\nFlatten[Map[(Thread[# -> DeleteCases[Nearest[words, #, 3], #]]) &, words]];\n\nForceGraph3D[%, ImageSize -> 500]\n```\n"})}),"\n",(0,t.jsxs)(n.p,{children:["All code cells will be converted to ",(0,t.jsx)(n.a,{href:"/frontend/Cell%20types/Input%20cell",children:"Input cells"}),", while plain text will be turned into ",(0,t.jsx)(n.a,{href:"/frontend/Cell%20types/Markdown",children:"Markdown"})," cells with hidden input."]}),"\n",(0,t.jsx)(n.p,{children:"Let\u2019s open this in WLJS Notebook:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:r(2887).A+"",width:"1228",height:"809"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);