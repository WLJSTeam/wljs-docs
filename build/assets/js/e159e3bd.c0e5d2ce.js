"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[86737],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var d=t(96540);const r={},i=d.createContext(r);function a(e){const n=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),d.createElement(i.Provider,{value:n},e.children)}},31588:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var d=t(74848),r=t(28453);const i={env:["WLJS","Wolfram Kernel"],update:!0,package:"wljs-sound",source:"https://github.com/JerryI/wljs-sound/blob/master/src/Kernel.wl",numericArray:!0},a=void 0,l={id:"frontend/Reference/Sound/PCMPlayer",title:"PCMPlayer",description:"creates a static or dynamic sound emitter. The following data types are supported",source:"@site/docs/frontend/Reference/Sound/PCMPlayer.md",sourceDirName:"frontend/Reference/Sound",slug:"/frontend/Reference/Sound/PCMPlayer",permalink:"/frontend/Reference/Sound/PCMPlayer",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1748709296e3,frontMatter:{env:["WLJS","Wolfram Kernel"],update:!0,package:"wljs-sound",source:"https://github.com/JerryI/wljs-sound/blob/master/src/Kernel.wl",numericArray:!0},sidebar:"tutorialSidebar",previous:{title:"ListPlay",permalink:"/frontend/Reference/Sound/ListPlay"},next:{title:"Play",permalink:"/frontend/Reference/Sound/Play"}},o={},s=[{value:"Options",id:"options",level:2},{value:"<code>SampleRate</code>",id:"samplerate",level:3},{value:"<code>&quot;AutoPlay&quot;</code>",id:"autoplay",level:3},{value:"<code>&quot;Event&quot;</code>",id:"event",level:3},{value:"<code>&quot;TimeAhead&quot;</code>",id:"timeahead",level:3},{value:"<code>&quot;GUI&quot;</code>",id:"gui",level:3},{value:"Dynamics",id:"dynamics",level:2},{value:"Streaming",id:"streaming",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-mathematica",children:"PCMPlayer[data_List | _Offload, type_String, opts___]\n"})}),"\n",(0,d.jsxs)(n.p,{children:["creates a static or dynamic sound emitter. The following data ",(0,d.jsx)(n.code,{children:"type"}),"s are supported"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:'"Real32"'})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:'"SignedInteger32"'})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:'"SignedInteger16"'})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:'"SignedInteger8"'})}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["where ",(0,d.jsx)(n.code,{children:"data"})," is 1D list of numerical data or ",(0,d.jsx)(n.a,{href:"/frontend/Reference/Interpreter/Offload",children:"Offload"})," ed symbol with numerical data."]}),"\n",(0,d.jsxs)(n.p,{children:["Or also it can also play a regular ",(0,d.jsx)(n.code,{children:"Audio"})," object"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-mathematica",children:"PCMPlayer[a_Audio]\n"})}),"\n",(0,d.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,d.jsx)(n.h3,{id:"samplerate",children:(0,d.jsx)(n.code,{children:"SampleRate"})}),"\n",(0,d.jsxs)(n.p,{children:["The default is ",(0,d.jsx)(n.code,{children:"44100"})]}),"\n",(0,d.jsx)(n.h3,{id:"autoplay",children:(0,d.jsx)(n.code,{children:'"AutoPlay"'})}),"\n",(0,d.jsxs)(n.p,{children:["The default is ",(0,d.jsx)(n.code,{children:"True"})]}),"\n",(0,d.jsx)(n.h3,{id:"event",children:(0,d.jsx)(n.code,{children:'"Event"'})}),"\n",(0,d.jsxs)(n.p,{children:["An ",(0,d.jsx)(n.code,{children:"uid"})," of event to be fired, when a buffer is about to end. It can be used to feed new data to a player aka streaming."]}),"\n",(0,d.jsx)(n.h3,{id:"timeahead",children:(0,d.jsx)(n.code,{children:'"TimeAhead"'})}),"\n",(0,d.jsxs)(n.p,{children:["The time is milliseconds, which is offset from the end of the sound buffer and used to fire ",(0,d.jsx)(n.code,{children:'"Event"'})]}),"\n",(0,d.jsx)(n.h3,{id:"gui",children:(0,d.jsx)(n.code,{children:'"GUI"'})}),"\n",(0,d.jsxs)(n.p,{children:["By the default is ",(0,d.jsx)(n.code,{children:"True"}),". If set to ",(0,d.jsx)(n.code,{children:"False"})," it won't render anything to the DOM, which makes it great when placed inside ",(0,d.jsx)(n.code,{children:"Epilog"})," or ",(0,d.jsx)(n.code,{children:"Prolog"})," of some other object."]}),"\n",(0,d.jsx)(n.h2,{id:"dynamics",children:"Dynamics"}),"\n",(0,d.jsxs)(n.p,{children:["Use ",(0,d.jsx)(n.code,{children:"Offload"})," to feed on data argument to a player in realtime."]}),"\n",(0,d.jsx)(n.h3,{id:"streaming",children:"Streaming"}),"\n",(0,d.jsx)(n.p,{children:"The simples example with streaming will look like this"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-mathematica",children:'music = Import[...];\n\n(* extract R channel *)\ndata = AudioData[music, "SignedInteger16"] // First;\nbuffer = {};\n\nindex = 1;\nEventHandler["bufferEnds", {"More" -> Function[Null,\n  index += 100000;\n  If[index > Length[data], Print["End"]; Return[]];\n  \n  buffer  = data[[index ;; Min[index + 100000 - 1, Length[data]]]]\n], "Stop" -> Function[Null,\n\tindex = 1;\n]}];\n\nPCMPlayer[buffer // Offload, "SignedInteger16", "Event"->"bufferEnds"]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}}}]);