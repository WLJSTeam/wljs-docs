<|"Notebook" -> <|"Controller" -> "9ab85392-11b9-4f83-a16e-a345c9bbce30", 
   "FocusedCell" -> CoffeeLiqueur`Notebook`Cells`CellObj[
     CoffeeLiqueur`Notebook`Cells`CellObj`$205], "HaveToSaveAs" -> False, 
   "MessangerChannel" -> Messanger, "ModalsChannel" -> 
    "60e55292-5482-4d22-be24-cb29439704dd", "Objects" -> <||>, 
   "Path" -> 
    "/Users/kirill/Github/wljs-demos-archive/Demos/07 - User \
input/JoyCon.wln", "Quick" -> True, "Symbols" -> <||>, 
   "TOC" -> {CoffeeLiqueur`Extensions`TOC`Private`heading[1, "JoyCon", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$176]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[2, "Javascript", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$176]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[3, "How to build", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$176]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[2, "How to use", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$204]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[2, "Use cases", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$204]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[3, "Presenter tool", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$204]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[3, 
      "Control `ManipulatePlot`", CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$214]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# JoyCon\nUse Nintendo Switch controllers to \
move slides and trigger actions\n\n<br/>\n\n## Javascript\nHere we use a \
library from NPM and bundle it right here.\n\n:::note\n__You do not need to \
build it by yourself__, WLJS Notebook stores assembled Javascript code in the \
output cell\n:::\n\n### How to build\nInstall NPM package locally", 
    "Display" -> "codemirror", "Hash" -> 
     "c2742473-ca56-4f39-9ef2-f30976217d08", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "# JoyCon\nUse Nintendo Switch controllers to move slides and \
trigger actions\n\n<br />\n\n## Javascript\nHere we use a library from NPM \
and bundle it right here.\n\n:::note\n__You do not need to build it by \
yourself__, WLJS Notebook stores assembled Javascript code in the output \
cell\n:::\n\n### How to build\nInstall NPM package locally", 
    "Display" -> "markdown", "Hash" -> 
     "2aa5bc4c-3d76-4127-a714-ce9e9592fcef", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> ".sh\nnpm install joy-con-webhid --prefix .", 
    "Display" -> "codemirror", "Hash" -> 
     "1c81a793-a41a-403c-8329-6c8d433680e5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "\nadded 2 packages, and audited 5 packages in 4s\n\nfound 0 \
vulnerabilities\n", "Display" -> "shell", 
    "Hash" -> "440e7839-b248-4cb1-81e4-5185430e03c5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> ".md\nNow we write supportive JavaScript code, which takes \
care of the initialization, joystick drift, and pipes to the event system of \
the Wolfram Kernel.", "Display" -> "codemirror", 
    "Hash" -> "14116698-3b76-45ae-963a-1014e921df88", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "Now we write a supportive Javascript code, which takes care \
about the initialization, joystick drift and pipes to even system of Wolfram \
Kernel.", "Display" -> "markdown", "Hash" -> 
     "09c737c8-4d17-476d-b57e-5cd48c11d28a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> ".esm\nimport {connectJoyCon, connectedJoyCons} from \
'joy-con-webhid';\n\nconst button = \
document.createElement('button');\nbutton.className = 'relative \
cursor-pointer rounded-md 0 h-6 pl-3 pr-2 text-left text-gray-500  \
focus:outline-none ring-1 sm:text-xs sm:leading-6 \
bg-gray-100';\nbutton.innerText = \"Connect\";\nlet state = \
\"Connect\";\n\nlet joyConQ = false;\n\nlet timer = performance.now();\nconst \
buttons = {\n  a: false,\n  b: false,\n  home: false,\n  plus: false,\n  r: \
false,\n  sl: false,\n  sr: false,\n  x: false,\n  y: false,\n  zr: \
false\n}\n\nconst stick = [0.,0.];\nlet restingStick = [0.,0.];\nlet \
calibrated = false;\n\nconst accelerometer = [0.0,0.0,0.0];\n\nconst interval \
= setInterval(async () => {\n  const devices = connectedJoyCons.values();\n  \
joyConQ = false;\n  for (const joyCon of devices) {\n    joyConQ = true;\n    \
if (joyCon.eventListenerAttached) {\n      continue;\n    }\n    // Open the \
device and enable standard full mode \n    await joyCon.open();\n    await \
joyCon.enableStandardFullMode();\n    //await joyCon.enableIMUMode();\n    \
await joyCon.enableVibration();\n    // Get information about the connected \
Joy-Con.\n    //console.log(await joyCon.getDeviceInfo());\n    // Rumble.\n  \
  await joyCon.rumble(600, 600, 0.5);\n    // Listen for HID input reports.\n \
   joyCon.addEventListener('hidinput', ({ detail }) => {\n      // Careful, \
this fires at ~60fps.\n      if (!calibrated) {\n        restingStick = \
[Number(detail.analogStickRight.horizontal), \
Number(detail.analogStickRight.vertical)]\n        calibrated = true;\n       \
 return;\n      }\n      const time = performance.now();\n      if (time - \
timer > 50) { // reduce a bit\n          timer = time;\n        \n          \
let pressedQ = false;\n          let movedQ = false;\n          let \
acceleratedQ = false;\n        \n          for (const key of \
Object.keys(buttons)) {\n            if (!buttons[key] && \
detail.buttonStatus[key]) pressedQ = true;\n            buttons[key] = \
detail.buttonStatus[key];\n          }\n\n          const vertical = \
Number(detail.analogStickRight.vertical)  -restingStick[1];\n          const \
horizontal = Number(detail.analogStickRight.horizontal) - \
restingStick[0];\n\n          if (Math.abs(vertical) > 0.1) movedQ = true;\n  \
        if (Math.abs(horizontal) > 0.1) movedQ = true;\n\n          stick[1] \
= -vertical;\n          stick[0] = horizontal;\n\n          //const \
acceleration = detail.actualAccelerometer;\n\n          //if \
(Math.abs(accelerometer[0] - acceleration.x) > 0.001) acceleratedQ = true;\n  \
        //if (Math.abs(accelerometer[1] - acceleration.y) > 0.001) \
acceleratedQ = true;\n          //if (Math.abs(accelerometer[2] - \
acceleration.z) > 0.001) acceleratedQ = true;\n\n          //accelerometer[0] \
=  acceleration.x;\n          //accelerometer[1] =  acceleration.y;\n         \
 //accelerometer[2] =  acceleration.z;\n\n          if (pressedQ) {\n         \
   for (const key of Object.keys(buttons)) {\n              if (buttons[key]) \
{\n                server.kernel.io.fire('JoyCon', true, key);\n              \
  break;\n              }\n            }\n          }\n\n         if (movedQ) \
{\n            server.kernel.io.fire('JoyCon', stick, 'Stick');\n         \
}\n\n         //if (acceleratedQ) {\n            \
//server.kernel.io.fire('JoyCon', accelerometer, 'Acceleration');\n         \
//}\n      };\n    });\n    joyCon.eventListenerAttached = true;\n  }\n\n  if \
(joyConQ) {\n    if (state != \"Connected\") {\n      state = \
\"Connected\";\n      button.innerText=state;\n      button.style.background \
= '#d8ffd8';\n    }\n  } else {\n    if (state != \"Connect\") {\n      state \
= \"Connect\";\n      button.innerText=state;\n      button.style.background \
= '';\n    }\n  }\n}, 2000);\n\nbutton.addEventListener('click', async () => \
{\n  // `JoyCon.connectJoyCon()` handles the initial HID pairing.\n  if \
(!joyConQ) {\n    await connectJoyCon();\n    return;\n  \
}\n\n});\n\nthis.return(button);\n\nthis.ondestroy(() => {\n  \
cancelInterval(interval);\n})", "Display" -> "codemirror", 
    "Hash" -> "1d13020d-6743-4158-95e3-999e91577418", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "// node_modules/joy-con-webhid/dist/madgwick.js\nfunction \
Madgwick(sampleInterval, options) {\n  options = options || {};\n  const \
sampleFreq = 1e3 / sampleInterval;\n  let beta = options.beta || 0.4;\n  let \
initalised = options.doInitialisation === true ? false : true;\n  let q0 = 1, \
q1 = 0, q2 = 0, q3 = 0;\n  let recipSampleFreq = 1 / sampleFreq;\n  function \
madgwickAHRSUpdateIMU(gx, gy, gz, ax, ay, az) {\n    let recipNorm;\n    let \
s0, s1, s2, s3;\n    let qDot1, qDot2, qDot3, qDot4;\n    let v2q0, v2q1, \
v2q2, v2q3, v4q0, v4q1, v4q2, v8q1, v8q2, q0q0, q1q1, q2q2, q3q3;\n    qDot1 \
= 0.5 * (-q1 * gx - q2 * gy - q3 * gz);\n    qDot2 = 0.5 * (q0 * gx + q2 * gz \
- q3 * gy);\n    qDot3 = 0.5 * (q0 * gy - q1 * gz + q3 * gx);\n    qDot4 = \
0.5 * (q0 * gz + q1 * gy - q2 * gx);\n    if (!(ax === 0 && ay === 0 && az \
=== 0)) {\n      recipNorm = (ax * ax + ay * ay + az * az) ** -0.5;\n      ax \
*= recipNorm;\n      ay *= recipNorm;\n      az *= recipNorm;\n      v2q0 = 2 \
* q0;\n      v2q1 = 2 * q1;\n      v2q2 = 2 * q2;\n      v2q3 = 2 * q3;\n     \
 v4q0 = 4 * q0;\n      v4q1 = 4 * q1;\n      v4q2 = 4 * q2;\n      v8q1 = 8 * \
q1;\n      v8q2 = 8 * q2;\n      q0q0 = q0 * q0;\n      q1q1 = q1 * q1;\n     \
 q2q2 = q2 * q2;\n      q3q3 = q3 * q3;\n      s0 = v4q0 * q2q2 + v2q2 * ax + \
v4q0 * q1q1 - v2q1 * ay;\n      s1 = v4q1 * q3q3 - v2q3 * ax + 4 * q0q0 * q1 \
- v2q0 * ay - v4q1 + v8q1 * q1q1 + v8q1 * q2q2 + v4q1 * az;\n      s2 = 4 * \
q0q0 * q2 + v2q0 * ax + v4q2 * q3q3 - v2q3 * ay - v4q2 + v8q2 * q1q1 + v8q2 * \
q2q2 + v4q2 * az;\n      s3 = 4 * q1q1 * q3 - v2q1 * ax + 4 * q2q2 * q3 - \
v2q2 * ay;\n      recipNorm = (s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3) ** \
-0.5;\n      s0 *= recipNorm;\n      s1 *= recipNorm;\n      s2 *= \
recipNorm;\n      s3 *= recipNorm;\n      qDot1 -= beta * s0;\n      qDot2 -= \
beta * s1;\n      qDot3 -= beta * s2;\n      qDot4 -= beta * s3;\n    }\n    \
q0 += qDot1 * recipSampleFreq;\n    q1 += qDot2 * recipSampleFreq;\n    q2 += \
qDot3 * recipSampleFreq;\n    q3 += qDot4 * recipSampleFreq;\n    recipNorm = \
(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3) ** -0.5;\n    q0 *= recipNorm;\n    \
q1 *= recipNorm;\n    q2 *= recipNorm;\n    q3 *= recipNorm;\n  }\n  function \
cross_product(ax, ay, az, bx, by, bz) {\n    return { x: ay * bz - az * by, \
y: az * bx - ax * bz, z: ax * by - ay * bx };\n  }\n  function \
eulerAnglesFromImuRad(ax, ay, az, mx, my, mz) {\n    const pitch = \
-Math.atan2(ax, Math.sqrt(ay * ay + az * az));\n    const tmp1 = \
cross_product(ax, ay, az, 1, 0, 0);\n    const tmp2 = cross_product(1, 0, 0, \
tmp1.x, tmp1.y, tmp1.z);\n    const roll = Math.atan2(tmp2.y, tmp2.z);\n    \
const cr = Math.cos(roll);\n    const sp = Math.sin(pitch);\n    const sr = \
Math.sin(roll);\n    const yh = my * cr - mz * sr;\n    const xh = mx * \
Math.cos(pitch) + my * sr * sp + mz * cr * sp;\n    const heading = \
-Math.atan2(yh, xh);\n    return { heading, pitch, roll };\n  }\n  function \
toQuaternion2(eulerAngles) {\n    const cy = Math.cos(eulerAngles.heading * \
0.5);\n    const sy = Math.sin(eulerAngles.heading * 0.5);\n    const cp = \
Math.cos(eulerAngles.pitch * 0.5);\n    const sp = Math.sin(eulerAngles.pitch \
* 0.5);\n    const cr = Math.cos(eulerAngles.roll * 0.5);\n    const sr = \
Math.sin(eulerAngles.roll * 0.5);\n    return { w: cr * cp * cy + sr * sp * \
sy, x: sr * cp * cy - cr * sp * sy, y: cr * sp * cy + sr * cp * sy, z: cr * \
cp * sy - sr * sp * cy };\n  }\n  function init(ax, ay, az, mx, my, mz) {\n   \
 const ea = eulerAnglesFromImuRad(ax, ay, az, mx, my, mz);\n    const iq = \
toQuaternion2(ea);\n    const recipNorm = (iq.w * iq.w + iq.x * iq.x + iq.y * \
iq.y + iq.z * iq.z) ** -0.5;\n    q0 = iq.w * recipNorm;\n    q1 = iq.x * \
recipNorm;\n    q2 = iq.y * recipNorm;\n    q3 = iq.z * recipNorm;\n    \
initalised = true;\n  }\n  function madgwickAHRSUpdate(gx, gy, gz, ax, ay, \
az, mx, my, mz, deltaTimeSec) {\n    recipSampleFreq = deltaTimeSec || \
recipSampleFreq;\n    if (!initalised) {\n      init(ax, ay, az, mx, my, \
mz);\n    }\n    let recipNorm;\n    let s0, s1, s2, s3;\n    let qDot1, \
qDot2, qDot3, qDot4;\n    let hx, hy;\n    let v2q0mx, v2q0my, v2q0mz, \
v2q1mx, v2bx, v2bz, v4bx, v4bz, v2q0, v2q1, v2q2, v2q3, v2q0q2, v2q2q3;\n    \
let q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;\n    if (mx \
=== void 0 || my === void 0 || mz === void 0 || mx === 0 && my === 0 && mz \
=== 0) {\n      madgwickAHRSUpdateIMU(gx, gy, gz, ax, ay, az);\n      \
return;\n    }\n    qDot1 = 0.5 * (-q1 * gx - q2 * gy - q3 * gz);\n    qDot2 \
= 0.5 * (q0 * gx + q2 * gz - q3 * gy);\n    qDot3 = 0.5 * (q0 * gy - q1 * gz \
+ q3 * gx);\n    qDot4 = 0.5 * (q0 * gz + q1 * gy - q2 * gx);\n    if (!(ax \
=== 0 && ay === 0 && az === 0)) {\n      recipNorm = (ax * ax + ay * ay + az \
* az) ** -0.5;\n      ax *= recipNorm;\n      ay *= recipNorm;\n      az *= \
recipNorm;\n      recipNorm = (mx * mx + my * my + mz * mz) ** -0.5;\n      \
mx *= recipNorm;\n      my *= recipNorm;\n      mz *= recipNorm;\n      \
v2q0mx = 2 * q0 * mx;\n      v2q0my = 2 * q0 * my;\n      v2q0mz = 2 * q0 * \
mz;\n      v2q1mx = 2 * q1 * mx;\n      v2q0 = 2 * q0;\n      v2q1 = 2 * \
q1;\n      v2q2 = 2 * q2;\n      v2q3 = 2 * q3;\n      v2q0q2 = 2 * q0 * \
q2;\n      v2q2q3 = 2 * q2 * q3;\n      q0q0 = q0 * q0;\n      q0q1 = q0 * \
q1;\n      q0q2 = q0 * q2;\n      q0q3 = q0 * q3;\n      q1q1 = q1 * q1;\n    \
  q1q2 = q1 * q2;\n      q1q3 = q1 * q3;\n      q2q2 = q2 * q2;\n      q2q3 = \
q2 * q3;\n      q3q3 = q3 * q3;\n      hx = mx * q0q0 - v2q0my * q3 + v2q0mz \
* q2 + mx * q1q1 + v2q1 * my * q2 + v2q1 * mz * q3 - mx * q2q2 - mx * q3q3;\n \
     hy = v2q0mx * q3 + my * q0q0 - v2q0mz * q1 + v2q1mx * q2 - my * q1q1 + \
my * q2q2 + v2q2 * mz * q3 - my * q3q3;\n      v2bx = Math.sqrt(hx * hx + hy \
* hy);\n      v2bz = -v2q0mx * q2 + v2q0my * q1 + mz * q0q0 + v2q1mx * q3 - \
mz * q1q1 + v2q2 * my * q3 - mz * q2q2 + mz * q3q3;\n      v4bx = 2 * v2bx;\n \
     v4bz = 2 * v2bz;\n      s0 = -v2q2 * (2 * q1q3 - v2q0q2 - ax) + v2q1 * \
(2 * q0q1 + v2q2q3 - ay) - v2bz * q2 * (v2bx * (0.5 - q2q2 - q3q3) + v2bz * \
(q1q3 - q0q2) - mx) + (-v2bx * q3 + v2bz * q1) * (v2bx * (q1q2 - q0q3) + v2bz \
* (q0q1 + q2q3) - my) + v2bx * q2 * (v2bx * (q0q2 + q1q3) + v2bz * (0.5 - \
q1q1 - q2q2) - mz);\n      s1 = v2q3 * (2 * q1q3 - v2q0q2 - ax) + v2q0 * (2 * \
q0q1 + v2q2q3 - ay) - 4 * q1 * (1 - 2 * q1q1 - 2 * q2q2 - az) + v2bz * q3 * \
(v2bx * (0.5 - q2q2 - q3q3) + v2bz * (q1q3 - q0q2) - mx) + (v2bx * q2 + v2bz \
* q0) * (v2bx * (q1q2 - q0q3) + v2bz * (q0q1 + q2q3) - my) + (v2bx * q3 - \
v4bz * q1) * (v2bx * (q0q2 + q1q3) + v2bz * (0.5 - q1q1 - q2q2) - mz);\n      \
s2 = -v2q0 * (2 * q1q3 - v2q0q2 - ax) + v2q3 * (2 * q0q1 + v2q2q3 - ay) - 4 * \
q2 * (1 - 2 * q1q1 - 2 * q2q2 - az) + (-v4bx * q2 - v2bz * q0) * (v2bx * (0.5 \
- q2q2 - q3q3) + v2bz * (q1q3 - q0q2) - mx) + (v2bx * q1 + v2bz * q3) * (v2bx \
* (q1q2 - q0q3) + v2bz * (q0q1 + q2q3) - my) + (v2bx * q0 - v4bz * q2) * \
(v2bx * (q0q2 + q1q3) + v2bz * (0.5 - q1q1 - q2q2) - mz);\n      s3 = v2q1 * \
(2 * q1q3 - v2q0q2 - ax) + v2q2 * (2 * q0q1 + v2q2q3 - ay) + (-v4bx * q3 + \
v2bz * q1) * (v2bx * (0.5 - q2q2 - q3q3) + v2bz * (q1q3 - q0q2) - mx) + \
(-v2bx * q0 + v2bz * q2) * (v2bx * (q1q2 - q0q3) + v2bz * (q0q1 + q2q3) - my) \
+ v2bx * q1 * (v2bx * (q0q2 + q1q3) + v2bz * (0.5 - q1q1 - q2q2) - mz);\n     \
 recipNorm = (s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3) ** -0.5;\n      s0 *= \
recipNorm;\n      s1 *= recipNorm;\n      s2 *= recipNorm;\n      s3 *= \
recipNorm;\n      qDot1 -= beta * s0;\n      qDot2 -= beta * s1;\n      qDot3 \
-= beta * s2;\n      qDot4 -= beta * s3;\n    }\n    q0 += qDot1 * \
recipSampleFreq;\n    q1 += qDot2 * recipSampleFreq;\n    q2 += qDot3 * \
recipSampleFreq;\n    q3 += qDot4 * recipSampleFreq;\n    recipNorm = (q0 * \
q0 + q1 * q1 + q2 * q2 + q3 * q3) ** -0.5;\n    q0 *= recipNorm;\n    q1 *= \
recipNorm;\n    q2 *= recipNorm;\n    q3 *= recipNorm;\n  }\n  return { \
update: madgwickAHRSUpdate, init, getQuaternion() {\n    return { w: q0, x: \
q1, y: q2, z: q3 };\n  } };\n}\n\n// \
node_modules/joy-con-webhid/dist/parse.js\nvar leftMadgwick = new \
Madgwick(10);\nvar rightMadgwick = new Madgwick(10);\nvar rad2deg = 180 / \
Math.PI;\nfunction baseSum(array, iteratee) {\n  let result;\n  for (const \
value of array) {\n    const current = iteratee(value);\n    if (current !== \
void 0) {\n      result = result === void 0 ? current : result + current;\n   \
 }\n  }\n  return result;\n}\nfunction mean(array) {\n  return \
baseMean(array, (value) => value);\n}\nfunction baseMean(array, iteratee) {\n \
 const length = array == null ? 0 : array.length;\n  return length ? \
baseSum(array, iteratee) / length : NaN;\n}\nfunction \
calculateBatteryLevel(value) {\n  let level;\n  switch (value[0]) {\n    case \
8:\n      level = \"full\";\n      break;\n    case 4:\n      level = \
\"medium\";\n      break;\n    case 2:\n      level = \"low\";\n      \
break;\n    case 1:\n      level = \"critical\";\n      break;\n    case 0:\n \
     level = \"empty\";\n      break;\n    default:\n      level = \
\"charging\";\n  }\n  return level;\n}\nvar ControllerType = { 1: \"Left \
Joy-Con\", 2: \"Right Joy-Con\", 3: \"Pro Controller\" };\nvar bias = \
0.75;\nvar zeroBias = 0.0125;\nvar scale = Math.PI / 2;\nfunction \
toEulerAngles(lastValues, gyroscope, accelerometer, productId) {\n  const now \
= Date.now();\n  const dt = lastValues.timestamp ? (now - \
lastValues.timestamp) / 1e3 : 0;\n  lastValues.timestamp = now;\n  const norm \
= Math.sqrt(accelerometer.x ** 2 + accelerometer.y ** 2 + accelerometer.z ** \
2);\n  lastValues.alpha = (1 - zeroBias) * (lastValues.alpha + gyroscope.z * \
dt);\n  if (norm !== 0) {\n    lastValues.beta = bias * (lastValues.beta + \
gyroscope.x * dt) + (1 - bias) * (accelerometer.x * scale / norm);\n    \
lastValues.gamma = bias * (lastValues.gamma + gyroscope.y * dt) + (1 - bias) \
* (accelerometer.y * -scale / norm);\n  }\n  return { alpha: productId === \
8198 ? (-1 * (lastValues.alpha * 180) / Math.PI * 430 % 90).toFixed(6) : \
(lastValues.alpha * 180 / Math.PI * 430 % 360).toFixed(6), beta: (-1 * \
(lastValues.beta * 180) / Math.PI).toFixed(6), gamma: productId === 8198 ? \
(-1 * (lastValues.gamma * 180) / Math.PI).toFixed(6) : (lastValues.gamma * \
180 / Math.PI).toFixed(6) };\n}\nfunction toEulerAnglesQuaternion(q) {\n  \
const ww = q.w * q.w;\n  const xx = q.x * q.x;\n  const yy = q.y * q.y;\n  \
const zz = q.z * q.z;\n  return { alpha: (rad2deg * Math.atan2(2 * (q.x * q.y \
+ q.z * q.w), xx - yy - zz + ww)).toFixed(6), beta: (rad2deg * -Math.asin(2 * \
(q.x * q.z - q.y * q.w))).toFixed(6), gamma: (rad2deg * Math.atan2(2 * (q.y * \
q.z + q.x * q.w), -xx - yy + zz + ww)).toFixed(6) };\n}\nfunction \
toQuaternion(gyro, accl, productId) {\n  if (productId === 8198) {\n    \
leftMadgwick.update(gyro.x, gyro.y, gyro.z, accl.x, accl.y, accl.z);\n    \
return leftMadgwick.getQuaternion();\n  }\n  rightMadgwick.update(gyro.x, \
gyro.y, gyro.z, accl.x, accl.y, accl.z);\n  return \
rightMadgwick.getQuaternion();\n}\nfunction toAcceleration(value) {\n  const \
view = new DataView(value.buffer);\n  return parseFloat((244e-6 * \
view.getInt16(0, true)).toFixed(6));\n}\nfunction toDegreesPerSecond(value) \
{\n  const view = new DataView(value.buffer);\n  return parseFloat((0.06103 * \
view.getInt16(0, true)).toFixed(6));\n}\nfunction \
toRevolutionsPerSecond(value) {\n  const view = new DataView(value.buffer);\n \
 return parseFloat((1694e-7 * view.getInt16(0, \
true)).toFixed(6));\n}\nfunction parseDeviceInfo(rawData, data) {\n  const \
bytes = rawData.slice(15, 15 + 11);\n  const firmwareMajorVersionRaw = \
bytes.slice(0, 1)[0];\n  const firmwareMinorVersionRaw = bytes.slice(1, \
2)[0];\n  const typeRaw = bytes.slice(2, 3);\n  const macAddressRaw = \
bytes.slice(4, 10);\n  const macAddress = [];\n  \
macAddressRaw.forEach((number) => {\n    \
macAddress.push(number.toString(16));\n  });\n  const spiColorInUseRaw = \
bytes.slice(11, 12);\n  const result = { _raw: bytes.slice(0, 12), _hex: \
bytes.slice(0, 12), firmwareVersion: { major: firmwareMajorVersionRaw, minor: \
firmwareMinorVersionRaw }, type: ControllerType[typeRaw[0]], macAddress: \
macAddress.join(\":\"), spiColorInUse: spiColorInUseRaw[0] === 1 };\n  return \
result;\n}\nfunction parseInputReportID(rawData, data) {\n  const \
inputReportID = { _raw: rawData.slice(0, 1), _hex: data.slice(0, 1) };\n  \
return inputReportID;\n}\nfunction parseTimer(rawData, data) {\n  const \
timer2 = { _raw: rawData.slice(1, 2), _hex: data.slice(1, 2) };\n  return \
timer2;\n}\nfunction parseBatteryLevel(rawData, data) {\n  const batteryLevel \
= { _raw: rawData.slice(2, 3), _hex: data.slice(2, 3), level: \
calculateBatteryLevel(data.slice(2, 3)) };\n  return \
batteryLevel;\n}\nfunction parseConnectionInfo(rawData, data) {\n  const \
connectionInfo = { _raw: rawData.slice(2, 3), _hex: data.slice(2, 3) };\n  \
return connectionInfo;\n}\nfunction parseButtonStatus(rawData, data) {\n  \
const buttonStatus = { _raw: rawData.slice(1, 3), _hex: data.slice(1, 3) };\n \
 return buttonStatus;\n}\nfunction parseCompleteButtonStatus(rawData, data) \
{\n  const buttonStatus = { _raw: rawData.slice(3, 6), _hex: data.slice(3, \
6), y: Boolean(1 & rawData[3]), x: Boolean(2 & rawData[3]), b: Boolean(4 & \
rawData[3]), a: Boolean(8 & rawData[3]), r: Boolean(64 & rawData[3]), zr: \
Boolean(128 & rawData[3]), down: Boolean(1 & rawData[5]), up: Boolean(2 & \
rawData[5]), right: Boolean(4 & rawData[5]), left: Boolean(8 & rawData[5]), \
l: Boolean(64 & rawData[5]), zl: Boolean(128 & rawData[5]), sr: Boolean(16 & \
rawData[3]) || Boolean(16 & rawData[5]), sl: Boolean(32 & rawData[3]) || \
Boolean(32 & rawData[5]), minus: Boolean(1 & rawData[4]), plus: Boolean(2 & \
rawData[4]), rightStick: Boolean(4 & rawData[4]), leftStick: Boolean(8 & \
rawData[4]), home: Boolean(16 & rawData[4]), capture: Boolean(32 & \
rawData[4]), chargingGrip: Boolean(128 & rawData[4]) };\n  return \
buttonStatus;\n}\nfunction parseAnalogStick(rawData, data) {\n  const \
analogStick = { _raw: rawData.slice(3, 4), _hex: data.slice(3, 4) };\n  \
return analogStick;\n}\nfunction parseAnalogStickLeft(rawData, data) {\n  let \
horizontal = rawData[6] | (rawData[7] & 15) << 8;\n  horizontal = \
((horizontal / 1995 - 1) * 2).toFixed(1);\n  let vertical = (rawData[7] >> 4 \
| rawData[8] << 4) * -1;\n  vertical = ((vertical / 2220 + 1) * \
2).toFixed(1);\n  const analogStickLeft = { _raw: rawData.slice(6, 9), _hex: \
data.slice(6, 9), horizontal, vertical };\n  return \
analogStickLeft;\n}\nfunction parseAnalogStickRight(rawData, data) {\n  let \
horizontal = rawData[9] | (rawData[10] & 15) << 8;\n  horizontal = \
((horizontal / 1995 - 1) * 2).toFixed(1);\n  let vertical = (rawData[10] >> 4 \
| rawData[11] << 4) * -1;\n  vertical = ((vertical / 2220 + 1) * \
2).toFixed(1);\n  const analogStickRight = { _raw: rawData.slice(9, 12), \
_hex: data.slice(9, 12), horizontal, vertical };\n  return \
analogStickRight;\n}\nfunction parseFilter(rawData, data) {\n  const filter = \
{ _raw: rawData.slice(4), _hex: data.slice(4) };\n  return \
filter;\n}\nfunction parseVibrator(rawData, data) {\n  const vibrator = { \
_raw: rawData.slice(12, 13), _hex: data.slice(12, 13) };\n  return \
vibrator;\n}\nfunction parseAck(rawData, data) {\n  const ack = { _raw: \
rawData.slice(13, 14), _hex: data.slice(13, 14) };\n  return \
ack;\n}\nfunction parseSubcommandID(rawData, data) {\n  const subcommandID = \
{ _raw: rawData.slice(14, 15), _hex: data.slice(14, 15) };\n  return \
subcommandID;\n}\nfunction parseSubcommandReplyData(rawData, data) {\n  const \
subcommandReplyData = { _raw: rawData.slice(15), _hex: data.slice(15) };\n  \
return subcommandReplyData;\n}\nfunction parseAccelerometers(rawData, data) \
{\n  const accelerometers = [{ x: { _raw: rawData.slice(13, 15), _hex: \
data.slice(13, 15), acc: toAcceleration(rawData.slice(13, 15)) }, y: { _raw: \
rawData.slice(15, 17), _hex: data.slice(15, 17), acc: \
toAcceleration(rawData.slice(15, 17)) }, z: { _raw: rawData.slice(17, 19), \
_hex: data.slice(17, 19), acc: toAcceleration(rawData.slice(17, 19)) } }, { \
x: { _raw: rawData.slice(25, 27), _hex: data.slice(25, 27), acc: \
toAcceleration(rawData.slice(25, 27)) }, y: { _raw: rawData.slice(27, 29), \
_hex: data.slice(27, 29), acc: toAcceleration(rawData.slice(27, 29)) }, z: { \
_raw: rawData.slice(29, 31), _hex: data.slice(29, 31), acc: \
toAcceleration(rawData.slice(29, 31)) } }, { x: { _raw: rawData.slice(37, \
39), _hex: data.slice(37, 39), acc: toAcceleration(rawData.slice(37, 39)) }, \
y: { _raw: rawData.slice(39, 41), _hex: data.slice(39, 41), acc: \
toAcceleration(rawData.slice(39, 41)) }, z: { _raw: rawData.slice(41, 43), \
_hex: data.slice(41, 43), acc: toAcceleration(rawData.slice(41, 43)) } }];\n  \
return accelerometers;\n}\nfunction parseGyroscopes(rawData, data) {\n  const \
gyroscopes = [[{ _raw: rawData.slice(19, 21), _hex: data.slice(19, 21), dps: \
toDegreesPerSecond(rawData.slice(19, 21)), rps: \
toRevolutionsPerSecond(rawData.slice(19, 21)) }, { _raw: rawData.slice(21, \
23), _hex: data.slice(21, 23), dps: toDegreesPerSecond(rawData.slice(21, \
23)), rps: toRevolutionsPerSecond(rawData.slice(21, 23)) }, { _raw: \
rawData.slice(23, 25), _hex: data.slice(23, 25), dps: \
toDegreesPerSecond(rawData.slice(23, 25)), rps: \
toRevolutionsPerSecond(rawData.slice(23, 25)) }], [{ _raw: rawData.slice(31, \
33), _hex: data.slice(31, 33), dps: toDegreesPerSecond(rawData.slice(31, \
33)), rps: toRevolutionsPerSecond(rawData.slice(31, 33)) }, { _raw: \
rawData.slice(33, 35), _hex: data.slice(33, 35), dps: \
toDegreesPerSecond(rawData.slice(33, 35)), rps: \
toRevolutionsPerSecond(rawData.slice(33, 35)) }, { _raw: rawData.slice(35, \
37), _hex: data.slice(35, 37), dps: toDegreesPerSecond(rawData.slice(35, \
37)), rps: toRevolutionsPerSecond(rawData.slice(35, 37)) }], [{ _raw: \
rawData.slice(43, 45), _hex: data.slice(43, 45), dps: \
toDegreesPerSecond(rawData.slice(43, 45)), rps: \
toRevolutionsPerSecond(rawData.slice(43, 45)) }, { _raw: rawData.slice(45, \
47), _hex: data.slice(45, 47), dps: toDegreesPerSecond(rawData.slice(45, \
47)), rps: toRevolutionsPerSecond(rawData.slice(45, 47)) }, { _raw: \
rawData.slice(47, 49), _hex: data.slice(47, 49), dps: \
toDegreesPerSecond(rawData.slice(47, 49)), rps: \
toRevolutionsPerSecond(rawData.slice(47, 49)) }]];\n  return \
gyroscopes;\n}\nfunction calculateActualAccelerometer(accelerometers) {\n  \
const elapsedTime = 5e-3 * accelerometers.length;\n  const \
actualAccelerometer = { x: parseFloat((mean(accelerometers.map((g) => g[0])) \
* elapsedTime).toFixed(6)), y: parseFloat((mean(accelerometers.map((g) => \
g[1])) * elapsedTime).toFixed(6)), z: parseFloat((mean(accelerometers.map((g) \
=> g[2])) * elapsedTime).toFixed(6)) };\n  return \
actualAccelerometer;\n}\nfunction calculateActualGyroscope(gyroscopes) {\n  \
const elapsedTime = 5e-3 * gyroscopes.length;\n  const actualGyroscopes = \
[mean(gyroscopes.map((g) => g[0])), mean(gyroscopes.map((g) => g[1])), \
mean(gyroscopes.map((g) => g[2]))].map((v) => parseFloat((v * \
elapsedTime).toFixed(6)));\n  return { x: actualGyroscopes[0], y: \
actualGyroscopes[1], z: actualGyroscopes[2] };\n}\nfunction \
parseRingCon(rawData, data) {\n  const ringcon = { _raw: rawData.slice(38, \
2), _hex: data.slice(38, 2), strain: new DataView(rawData.buffer, 39, \
2).getInt16(0, true) };\n  return ringcon;\n}\n\n// \
node_modules/joy-con-webhid/dist/connectRingCon.js\nvar connectRingCon = \
async (device) => {\n  const defineSendReportAsyncFunction = ({ subcommand, \
expectedReport, timeoutErrorMessage = \"timeout.\" }) => (device2) => new \
Promise(async (resolve, reject) => {\n    const timeoutId = setTimeout(() => \
{\n      device2.removeEventListener(\"inputreport\", checkInputReport);\n    \
  reject(new Error(timeoutErrorMessage));\n    }, 5e3);\n    const \
checkInputReport = (event) => {\n      if (event.reportId !== 33) {\n        \
return;\n      }\n      const data = new Uint8Array(event.data.buffer);\n     \
 for (const [key, value] of Object.entries(expectedReport)) {\n        if \
(data[key - 1] !== value) {\n          return;\n        }\n      }\n      \
device2.removeEventListener(\"inputreport\", checkInputReport);\n      \
clearTimeout(timeoutId);\n      setTimeout(resolve, 50);\n    };\n    \
device2.addEventListener(\"inputreport\", checkInputReport);\n    await \
device2.sendReport(1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, \
...subcommand]));\n  });\n  const setInputReportModeTo0x30 = \
defineSendReportAsyncFunction({ subcommand: [3, 48], expectedReport: { 14: 3 \
} });\n  const enablingMCUData221 = defineSendReportAsyncFunction({ \
subcommand: [34, 1], expectedReport: { 13: 128, 14: 34 } });\n  const \
enablingMCUData212111 = defineSendReportAsyncFunction({ subcommand: [33, 33, \
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243], expectedReport: { 14: 33 } });\n  const \
getExtData59 = defineSendReportAsyncFunction({ subcommand: [89], \
expectedReport: { 14: 89, 16: 32 }, timeoutErrorMessage: \"ring-con not \
found.\" });\n  const getExtDevInFormatConfig5C = \
defineSendReportAsyncFunction({ subcommand: [92, 6, 3, 37, 6, 0, 0, 0, 0, 28, \
22, 237, 52, 54, 0, 0, 0, 10, 100, 11, 230, 169, 34, 0, 0, 4, 0, 0, 0, 0, 0, \
0, 0, 144, 168, 225, 52, 54], expectedReport: { 14: 92 } });\n  const \
startExternalPolling5A = defineSendReportAsyncFunction({ subcommand: [90, 4, \
1, 1, 2], expectedReport: { 14: 90 } });\n  await \
enablingMCUData221(device);\n  await enablingMCUData212111(device);\n  await \
getExtData59(device);\n  await getExtDevInFormatConfig5C(device);\n  await \
startExternalPolling5A(device);\n};\n\n// \
node_modules/joy-con-webhid/dist/joycon.js\nvar concatTypedArrays = (a, b) => \
{\n  const c = new a.constructor(a.length + b.length);\n  c.set(a, 0);\n  \
c.set(b, a.length);\n  return c;\n};\nvar JoyCon = class extends EventTarget \
{\n  constructor(device) {\n    super();\n    this.device = device;\n    \
this.lastValues = { timestamp: null, alpha: 0, beta: 0, gamma: 0 };\n  }\n  \
async open() {\n    if (!this.device.opened) {\n      await \
this.device.open();\n    }\n    this.device.addEventListener(\"inputreport\", \
this._onInputReport.bind(this));\n  }\n  async getRequestDeviceInfo() {\n    \
const outputReportID = 1;\n    const subcommand = [2];\n    const data = [0, \
0, 0, 0, 0, 0, 0, 0, 0, ...subcommand];\n    const result = new \
Promise((resolve) => {\n      const onDeviceInfo = ({ detail: deviceInfo }) \
=> {\n        this.removeEventListener(\"deviceinfo\", onDeviceInfo);\n       \
 delete deviceInfo._raw;\n        delete deviceInfo._hex;\n        \
resolve(deviceInfo);\n      };\n      this.addEventListener(\"deviceinfo\", \
onDeviceInfo);\n    });\n    await this.device.sendReport(outputReportID, new \
Uint8Array(data));\n    return result;\n  }\n  async getBatteryLevel() {\n    \
const outputReportID = 1;\n    const subCommand = [80];\n    const data = [0, \
0, 0, 0, 0, 0, 0, 0, 0, ...subCommand];\n    const result = new \
Promise((resolve) => {\n      const onBatteryLevel = ({ detail: batteryLevel \
}) => {\n        this.removeEventListener(\"batterylevel\", \
onBatteryLevel);\n        delete batteryLevel._raw;\n        delete \
batteryLevel._hex;\n        resolve(batteryLevel);\n      };\n      \
this.addEventListener(\"batterylevel\", onBatteryLevel);\n    });\n    await \
this.device.sendReport(outputReportID, new Uint8Array(data));\n    return \
result;\n  }\n  async enableSimpleHIDMode() {\n    const outputReportID = \
1;\n    const subcommand = [3, 63];\n    const data = [0, 0, 0, 0, 0, 0, 0, \
0, 0, ...subcommand];\n    await this.device.sendReport(outputReportID, new \
Uint8Array(data));\n  }\n  async enableStandardFullMode() {\n    const \
outputReportID = 1;\n    const subcommand = [3, 48];\n    const data = [0, 0, \
0, 0, 0, 0, 0, 0, 0, ...subcommand];\n    await \
this.device.sendReport(outputReportID, new Uint8Array(data));\n  }\n  async \
enableIMUMode() {\n    const outputReportID = 1;\n    const subcommand = [64, \
1];\n    const data = [0, 0, 0, 0, 0, 0, 0, 0, 0, ...subcommand];\n    await \
this.device.sendReport(outputReportID, new Uint8Array(data));\n  }\n  async \
disableIMUMode() {\n    const outputReportID = 1;\n    const subcommand = \
[64, 0];\n    const data = [0, 0, 0, 0, 0, 0, 0, 0, 0, ...subcommand];\n    \
await this.device.sendReport(outputReportID, new Uint8Array(data));\n  }\n  \
async enableVibration() {\n    const outputReportID = 1;\n    const \
subcommand = [72, 1];\n    const data = [0, 0, 1, 64, 64, 0, 1, 64, 64, \
...subcommand];\n    await this.device.sendReport(outputReportID, new \
Uint8Array(data));\n  }\n  async disableVibration() {\n    const \
outputReportID = 1;\n    const subcommand = [72, 0];\n    const data = [0, 0, \
1, 64, 64, 0, 1, 64, 64, ...subcommand];\n    await \
this.device.sendReport(outputReportID, new Uint8Array(data));\n  }\n  async \
enableRingCon() {\n    await connectRingCon(this.device);\n  }\n  async \
enableUSBHIDJoystickReport() {\n    const usb = \
this.device.collections[0].outputReports.find((r) => r.reportId == 128) != \
null;\n    if (usb) {\n      await this.device.sendReport(128, new \
Uint8Array([1]));\n      await this.device.sendReport(128, new \
Uint8Array([2]));\n      await this.device.sendReport(1, new \
Uint8Array([3]));\n      await this.device.sendReport(128, new \
Uint8Array([4]));\n    }\n  }\n  async rumble(lowFrequency, highFrequency, \
amplitude) {\n    const clamp = (value, min, max) => Math.min(Math.max(value, \
min), max);\n    const outputReportID = 16;\n    const data = new \
Uint8Array(9);\n    data[0] = 0;\n    let lf = clamp(lowFrequency, 40.875885, \
626.286133);\n    let hf = clamp(highFrequency, 81.75177, 1252.572266);\n    \
hf = (Math.round(32 * Math.log2(hf * 0.1)) - 96) * 4;\n    lf = Math.round(32 \
* Math.log2(lf * 0.1)) - 64;\n    const amp = clamp(amplitude, 0, 1);\n    \
let hfAmp;\n    if (amp == 0) {\n      hfAmp = 0;\n    } else if (amp < \
0.117) {\n      hfAmp = (Math.log2(amp * 1e3) * 32 - 96) / (5 - Math.pow(amp, \
2)) - 1;\n    } else if (amp < 0.23) {\n      hfAmp = Math.log2(amp * 1e3) * \
32 - 96 - 92;\n    } else {\n      hfAmp = (Math.log2(amp * 1e3) * 32 - 96) * \
2 - 246;\n    }\n    let lfAmp = Math.round(hfAmp) * 0.5;\n    const parity = \
lfAmp % 2;\n    if (parity > 0) {\n      --lfAmp;\n    }\n    lfAmp = lfAmp \
>> 1;\n    lfAmp += 64;\n    if (parity > 0) {\n      lfAmp |= 32768;\n    \
}\n    data[1] = hf & 255;\n    data[2] = hfAmp + (hf >>> 8 & 255);\n    \
data[3] = lf + (lfAmp >>> 8 & 255);\n    data[4] += lfAmp & 255;\n    for \
(let i = 0; i < 4; i++) {\n      data[5 + i] = data[1 + i];\n    }\n    await \
this.device.sendReport(outputReportID, new Uint8Array(data));\n  }\n  async \
setLEDState(n) {\n    const NO_RUMBLE = [0, 0, 0, 0, 0, 0, 0, 0];\n    const \
subcommand = [48, n];\n    await this.device.sendReport(1, new \
Uint8Array([...NO_RUMBLE, 0, ...subcommand]));\n  }\n  async setLED(n) {\n    \
this.ledstate |= 1 << n;\n    await this.setLEDState(this.ledstate);\n  }\n  \
async resetLED(n) {\n    this.ledstate &= ~(1 << n | 1 << 4 + n);\n    await \
this.setLEDState(this.ledstate);\n  }\n  async blinkLED(n) {\n    \
this.ledstate &= ~(1 << n);\n    this.ledstate |= 1 << 4 + n;\n    await \
this.setLEDState(this.ledstate);\n  }\n  _onInputReport(event) {\n    let { \
data, reportId, device } = event;\n    if (!data) {\n      return;\n    }\n   \
 data = concatTypedArrays(new Uint8Array([reportId]), new \
Uint8Array(data.buffer));\n    const hexData = data.map((byte) => \
byte.toString(16));\n    let packet = { inputReportID: \
parseInputReportID(data, hexData) };\n    switch (reportId) {\n      case 63: \
{\n        packet = { ...packet, buttonStatus: parseButtonStatus(data, \
hexData), analogStick: parseAnalogStick(data, hexData), filter: \
parseFilter(data, hexData) };\n        break;\n      }\n      case 33:\n      \
case 48: {\n        packet = { ...packet, timer: parseTimer(data, hexData), \
batteryLevel: parseBatteryLevel(data, hexData), connectionInfo: \
parseConnectionInfo(data, hexData), buttonStatus: \
parseCompleteButtonStatus(data, hexData), analogStickLeft: \
parseAnalogStickLeft(data, hexData), analogStickRight: \
parseAnalogStickRight(data, hexData), vibrator: parseVibrator(data, hexData) \
};\n        if (reportId === 33) {\n          packet = { ...packet, ack: \
parseAck(data, hexData), subcommandID: parseSubcommandID(data, hexData), \
subcommandReplyData: parseSubcommandReplyData(data, hexData), deviceInfo: \
parseDeviceInfo(data, hexData) };\n        }\n        if (reportId === 48) \
{\n          const accelerometers = parseAccelerometers(data, hexData);\n     \
     const gyroscopes = parseGyroscopes(data, hexData);\n          const rps \
= calculateActualGyroscope(gyroscopes.map((g) => g.map((v) => v.rps)));\n     \
     const dps = calculateActualGyroscope(gyroscopes.map((g) => g.map((v) => \
v.dps)));\n          const acc = \
calculateActualAccelerometer(accelerometers.map((a) => [a.x.acc, a.y.acc, \
a.z.acc]));\n          const quaternion = toQuaternion(rps, acc, \
device.productId);\n          packet = { ...packet, accelerometers, \
gyroscopes, actualAccelerometer: acc, actualGyroscope: { dps, rps }, \
actualOrientation: toEulerAngles(this.lastValues, rps, acc, \
device.productId), actualOrientationQuaternion: \
toEulerAnglesQuaternion(quaternion), quaternion, ringCon: parseRingCon(data, \
hexData) };\n        }\n        break;\n      }\n    }\n    if \
(packet.deviceInfo?.type) {\n      \
this._receiveDeviceInfo(packet.deviceInfo);\n    }\n    if \
(packet.batteryLevel?.level) {\n      \
this._receiveBatteryLevel(packet.batteryLevel);\n    }\n    \
this._receiveInputEvent(packet);\n  }\n  _receiveDeviceInfo(deviceInfo) {\n   \
 this.dispatchEvent(new CustomEvent(\"deviceinfo\", { detail: deviceInfo \
}));\n  }\n  _receiveBatteryLevel(batteryLevel) {\n    this.dispatchEvent(new \
CustomEvent(\"batterylevel\", { detail: batteryLevel }));\n  }\n};\nvar \
JoyConLeft = class extends JoyCon {\n  constructor(device) {\n    \
super(device);\n  }\n  _receiveInputEvent(packet) {\n    delete \
packet.buttonStatus.x;\n    delete packet.buttonStatus.y;\n    delete \
packet.buttonStatus.b;\n    delete packet.buttonStatus.a;\n    delete \
packet.buttonStatus.plus;\n    delete packet.buttonStatus.r;\n    delete \
packet.buttonStatus.zr;\n    delete packet.buttonStatus.home;\n    delete \
packet.buttonStatus.rightStick;\n    this.dispatchEvent(new \
CustomEvent(\"hidinput\", { detail: packet }));\n  }\n};\nvar JoyConRight = \
class extends JoyCon {\n  constructor(device) {\n    super(device);\n  }\n  \
_receiveInputEvent(packet) {\n    delete packet.buttonStatus.up;\n    delete \
packet.buttonStatus.down;\n    delete packet.buttonStatus.left;\n    delete \
packet.buttonStatus.right;\n    delete packet.buttonStatus.minus;\n    delete \
packet.buttonStatus.l;\n    delete packet.buttonStatus.zl;\n    delete \
packet.buttonStatus.capture;\n    delete packet.buttonStatus.leftStick;\n    \
this.dispatchEvent(new CustomEvent(\"hidinput\", { detail: packet }));\n  \
}\n};\nvar GeneralController = class extends JoyCon {\n  constructor(device) \
{\n    super(device);\n  }\n  _receiveInputEvent(packet) {\n    \
this.dispatchEvent(new CustomEvent(\"hidinput\", { detail: packet }));\n  \
}\n};\n\n// node_modules/joy-con-webhid/dist/index.js\nvar connectedJoyCons = \
/* @__PURE__ */ new Map();\nvar devices = [];\nvar getDeviceID = (device) => \
{\n  const n = devices.indexOf(device);\n  if (n >= 0) {\n    return n;\n  \
}\n  devices.push(device);\n  return devices.length - 1;\n};\nvar addDevice = \
async (device) => {\n  const id = getDeviceID(device);\n  console.log(`HID \
connected: ${id} ${device.productId.toString(16)} ${device.productName}`);\n  \
connectedJoyCons.set(id, await connectDevice(device));\n};\nvar removeDevice \
= async (device) => {\n  const id = getDeviceID(device);\n  console.log(`HID \
disconnected: ${id} ${device.productId.toString(16)} \
${device.productName}`);\n  \
connectedJoyCons.delete(id);\n};\nnavigator.hid.addEventListener(\"connect\", \
async ({ device }) => {\n  \
addDevice(device);\n});\nnavigator.hid.addEventListener(\"disconnect\", ({ \
device }) => {\n  \
removeDevice(device);\n});\ndocument.addEventListener(\"DOMContentLoaded\", \
async () => {\n  const devices2 = await navigator.hid.getDevices();\n  \
devices2.forEach(async (device) => {\n    await addDevice(device);\n  \
});\n});\nvar connectJoyCon = async () => {\n  const filters = [{ vendorId: \
1406 }];\n  try {\n    const [device] = await navigator.hid.requestDevice({ \
filters });\n    if (!device) {\n      return;\n    }\n    await \
addDevice(device);\n  } catch (error) {\n    console.error(error.name, \
error.message);\n  }\n};\nvar connectDevice = async (device) => {\n  let \
joyCon = null;\n  if (device.productId === 8198) {\n    joyCon = new \
JoyConLeft(device);\n  } else if (device.productId === 8199) {\n    if \
(device.productName === \"Joy-Con (R)\") {\n      joyCon = new \
JoyConRight(device);\n    }\n  }\n  if (!joyCon) {\n    joyCon = new \
GeneralController(device);\n  }\n  await joyCon.open();\n  await \
joyCon.enableUSBHIDJoystickReport();\n  await \
joyCon.enableStandardFullMode();\n  await joyCon.enableIMUMode();\n  return \
joyCon;\n};\n\n// <stdin>\nvar button = \
document.createElement(\"button\");\nbutton.className = \"relative \
cursor-pointer rounded-md 0 h-6 pl-3 pr-2 text-left text-gray-500  \
focus:outline-none ring-1 sm:text-xs sm:leading-6 \
bg-gray-100\";\nbutton.innerText = \"Connect\";\nvar state = \
\"Connect\";\nvar joyConQ = false;\nvar timer = performance.now();\nvar \
buttons = {\n  a: false,\n  b: false,\n  home: false,\n  plus: false,\n  r: \
false,\n  sl: false,\n  sr: false,\n  x: false,\n  y: false,\n  zr: \
false\n};\nvar stick = [0, 0];\nvar restingStick = [0, 0];\nvar calibrated = \
false;\nvar interval = setInterval(async () => {\n  const devices2 = \
connectedJoyCons.values();\n  joyConQ = false;\n  for (const joyCon of \
devices2) {\n    joyConQ = true;\n    if (joyCon.eventListenerAttached) {\n   \
   continue;\n    }\n    await joyCon.open();\n    await \
joyCon.enableStandardFullMode();\n    await joyCon.enableVibration();\n    \
await joyCon.rumble(600, 600, 0.5);\n    \
joyCon.addEventListener(\"hidinput\", ({ detail }) => {\n      if \
(!calibrated) {\n        restingStick = \
[Number(detail.analogStickRight.horizontal), \
Number(detail.analogStickRight.vertical)];\n        calibrated = true;\n      \
  return;\n      }\n      const time = performance.now();\n      if (time - \
timer > 50) {\n        timer = time;\n        let pressedQ = false;\n        \
let movedQ = false;\n        let acceleratedQ = false;\n        for (const \
key of Object.keys(buttons)) {\n          if (!buttons[key] && \
detail.buttonStatus[key]) pressedQ = true;\n          buttons[key] = \
detail.buttonStatus[key];\n        }\n        const vertical = \
Number(detail.analogStickRight.vertical) - restingStick[1];\n        const \
horizontal = Number(detail.analogStickRight.horizontal) - restingStick[0];\n  \
      if (Math.abs(vertical) > 0.1) movedQ = true;\n        if \
(Math.abs(horizontal) > 0.1) movedQ = true;\n        stick[1] = -vertical;\n  \
      stick[0] = horizontal;\n        if (pressedQ) {\n          for (const \
key of Object.keys(buttons)) {\n            if (buttons[key]) {\n             \
 server.kernel.io.fire(\"JoyCon\", true, key);\n              break;\n        \
    }\n          }\n        }\n        if (movedQ) {\n          \
server.kernel.io.fire(\"JoyCon\", stick, \"Stick\");\n        }\n      }\n    \
  ;\n    });\n    joyCon.eventListenerAttached = true;\n  }\n  if (joyConQ) \
{\n    if (state != \"Connected\") {\n      state = \"Connected\";\n      \
button.innerText = state;\n      button.style.background = \"#d8ffd8\";\n    \
}\n  } else {\n    if (state != \"Connect\") {\n      state = \"Connect\";\n  \
    button.innerText = state;\n      button.style.background = \"\";\n    }\n \
 }\n}, 2e3);\nbutton.addEventListener(\"click\", async () => {\n  if \
(!joyConQ) {\n    await connectJoyCon();\n    return;\n  \
}\n});\ng0this.return(button);\ng0this.ondestroy(() => {\n  \
cancelInterval(interval);\n});\n", "Display" -> "esm", 
    "Hash" -> "3a0a31da-40db-49e1-90be-7f2b3bcac474", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> ".md\n## How to use\n1. Pair *right* JoyCon via bluetooth to \
your PC\n2. Click __Connect__ button once\n\n<br/>\n\n## Use cases\nLet's go \
though basic example\n\n<br/>\n\n### Presenter tool\nEvaluate this cell below \
it will capture the following commands\n\n- __ZR__ next slide\n- __Y__ \
previous slide", "Display" -> "codemirror", 
    "Hash" -> "78b4866a-5f83-4be6-b4c6-94c757390b70", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "## How to use\n1. Pair *right* JoyCon via bluetooth to your \
PC\n2. Click __Connect__ button once\n\n<br />\n\n## Use cases\nLet's go \
though basic example\n\n<br />\n\n### Presenter tool\nEvaluate this cell \
below it will capture the following commands\n\n- __ZR__ next slide\n- __Y__ \
previous slide", "Display" -> "markdown", 
    "Hash" -> "08d7a3eb-4072-4940-93eb-658640855d27", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "EventHandler[\"JoyCon\", {\n  \"zr\" -> \
(FrontSubmit[FrontSlidesSelected[\"navigateNext\", 1]]&),\n  \"y\" -> \
(FrontSubmit[FrontSlidesSelected[\"navigatePrev\", 1]]&)\n}];", 
    "Display" -> "codemirror", "Hash" -> 
     "efb7f18b-fd6b-489a-a2ec-40079be89226", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> ".slides\n\n# First\n---\n# Second\n---\n# Third", 
    "Display" -> "codemirror", "Hash" -> 
     "c8997715-2f24-4a60-8608-9b15faae882a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "<dummy >\n# First\n---\n# Second\n---\n# Third</dummy>", 
    "Display" -> "slide", "Hash" -> "3ec2afb3-35aa-406b-99c6-03bda8a36314", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> ".md\n<br/>\n\nHere is how it \
looks\n\n\n![](/attachments/IMG_7868-ezgif.com-optimize-951.gif)\n\n\n<br/>", 
    "Display" -> "codemirror", "Hash" -> 
     "788a510a-101a-4f44-a99c-8dffd2766fcf", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "<br />\n\nHere is how it \
looks\n\n\n![](/attachments/IMG_7868-ezgif.com-optimize-951.gif)<br />", 
    "Display" -> "markdown", "Hash" -> 
     "b41d55aa-7ada-4e10-88ad-66d60b917454", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> ".md\n### Control `ManipulatePlot`\nWe can use Joystick to \
move sliders on the existing manipulate widget. For that we use \
`TrackedExpression` option", "Display" -> "codemirror", 
    "Hash" -> "a9507db1-8d15-4aa6-b8e2-693d7c412971", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "### Control `ManipulatePlot`\nWe can use Joystick to move \
sliders on the existing manipulate widget. For that we use \
`TrackedExpression` option", "Display" -> "markdown", 
    "Hash" -> "0e0f9298-008f-4199-b9f3-983ccd8f73a8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "pos = 0.5 {1.0, 1.0};\nEventHandler[\n  \"JoyCon\",\n  {\n    \
\"Stick\" -> Function[xy, pos = pos + 0.05 xy],\n    \"r\" -> Function[Null, \
pos = 0.5 {1.0, 1.0}]\n  }\n];\n\nManipulateParametricPlot[\n  {Sin[x t], \
Cos[y t]},\n  {t, 0, 20},\n  {{x, 1.0}, -1, 1, 0.01},\n  {{y, 1.0}, -1, 1, \
0.01},\n  \"TrackedExpression\" -> Offload[pos],\n  Epilog -> {Red, \
Point[Offload[pos]]}\n]", "Display" -> "codemirror", 
    "Hash" -> "cafdcc76-df7b-4832-b4f6-8a8972bf738d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> ".md\nClick __R__ to reset\n\n<br/>\n\nDemonstration \
animation\n\n\n![](/attachments/IMG_7869-ezgif.com-optimize-a44.gif)\n", 
    "Display" -> "codemirror", "Hash" -> 
     "c03bbee8-518d-444c-8995-935d4479160a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>, 
   <|"Data" -> "Click __R__ to reset\n\n<br />\n\nDemonstration \
animation\n\n\n![](/attachments/IMG_7869-ezgif.com-optimize-a44.gif)", 
    "Display" -> "markdown", "Hash" -> 
     "e9454c6a-e66f-4b79-9c5e-0b61857b145e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fe0cf21d-493c-495d-9e4a-c0ced0d83c6d"|>}, "serializer" -> "jsfn4"|>
