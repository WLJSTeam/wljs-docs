<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$336], 
   "MessangerChannel" -> Messanger, "ModalsChannel" -> 
    "b0301f87-42c0-417d-b60a-6bc80c18f4c7", "Objects" -> <||>, 
   "Path" -> "/users/kirill/Library/Application \
Support/wljs-notebook/Demos/05 - Interaction/Inverse kinematics.wln", 
   "ReadOnly" -> False, "Symbols" -> 
    <|"chain" -> JSObject[(-1)[0][(-0.6553897305725209)[0.3720808974740953], 
        (-0.3492366122017154)[0.2667639974993904], (-0.33213583863953894)[
         0.060785234897790474], (-0.20118664530411393)[0.04458003551958554], 
        (-0.12317527591383709)[0.07635659251793439], (-0.11666705289749073)[
         0.12973641550503803]]]|>, 
   "TOC" -> {Notebook`Editor`TOC`Private`heading[1, 
      "Planar Inverse Kinematics", CellObj[JerryI`Notebook`CellObj`$324]], 
     Notebook`Editor`TOC`Private`heading[2, "FABRIK Solver", 
      CellObj[JerryI`Notebook`CellObj`$333]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# Planar Inverse \
Kinematics\n\n\n![](attachments/planar_ik.png)\n\n<small>src. \
[FOUNDRY](https://learn.foundry.com/modo/content/help/pages/animation/modifie\
rs/planar_ik.html)</small>\n\n", "Display" -> "codemirror", 
    "Hash" -> "a020a204-b53d-4736-929f-2c2e437a704d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "# Planar Inverse \
Kinematics\n\n\n![](attachments/planar_ik.png)\n\n<small>src. \
[FOUNDRY](https://learn.foundry.com/modo/content/help/pages/animation/modifie\
rs/planar_ik.html)</small>\n\n", "Display" -> "markdown", 
    "Hash" -> "a21028db-074e-42b0-859a-1c65216c25f2", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> ".md\n*the actual implemntation is not well-optimized for \
Wolfram Language, but serves a good purpose for the demonstration*", 
    "Display" -> "codemirror", "Hash" -> 
     "bc8685ba-f337-463e-b211-e52a84b07b14", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "\n*the actual implemntation is not well-optimized for Wolfram \
Language, but serves a good purpose for the demonstration*", 
    "Display" -> "markdown", "Hash" -> 
     "362c474d-9fc0-4a9c-a0e0-b82de772891d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> ".md\nDefine a bunch of points connect them into a segmented \
line with fixed length", "Display" -> "codemirror", 
    "Hash" -> "d3f25971-5367-4587-ad80-bf5bad050244", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "\nDefine a bunch of points connect them into a segmented line \
with fixed length", "Display" -> "markdown", 
    "Hash" -> "97cebd95-d33d-4211-b5a4-f78ebc461c1a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "chain = Table[Exp[-\[Phi]]{-Cos[\[Phi]], Sin[\[Phi]]}, \
{\[Phi], 0, \[Pi] - \[Pi]/7, \[Pi]/7.0}];\nGraphics[{\n    Line[chain // \
Offload], Black, \n    PointSize[0.04], Point[chain // Offload], Red,\n    \
EventHandler[Graphics`Canvas[], {\n      \"mousemove\" -> handler\n    }]\n  \
},\n  Axes->True, PlotRange->{{-1,0.2}, {0,0.4}}, ImageSize->400\n]", 
    "Display" -> "codemirror", "Hash" -> 
     "49eed1a8-06d8-466e-8f04-099a7c9b6ce8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False, "init" -> False|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "(*VB[*)(Graphics[{Line[Offload[chain]], GrayLevel[0], \
PointSize[0.04], Point[Offload[chain]], RGBColor[1, 0, 0], \
EventListener[Graphics`Canvas[], {\"mousemove\" -> \
\"0edb4459-16ab-414b-84b1-aae590720d47\"}]}, Axes -> True, PlotRange -> {{-1, \
0.2}, {0, 0.4}}, ImageSize -> \
400])(*,*)(*\"1:eJx9kE1OwzAQhUOh/CwQGy6AxDZSglxKVxFUKCBFAiUcALsZt5YcG9lJBOUS3\
cKaNffgCCw5CdgxUdMKMYvRPH+jmXk+IjKlG57n6S2TriTPqS30rkmxwg8zNtF0u+UJ0+WyO2ECnN\
ox6YZSLnGu+6aezDATDu25QU8J1MCZEd7y/VYyUWZsDur58D3+mr9FjvVb9t/0zfbMNL4YSy4Vs83\
NBremZxv2TbqsQZT2dBCgqGX6oGPvfoxFjXXXl3HZa1VaccjstYWsNBSyhuzYqABygtBg5IenmPgo\
RMQ/QyT0MYbBKBieBDkarg5pivNH0E1xpypY482XcFmmWEw7bPUcq9i3CfX6YuMjWmPW3y/7jP7Yc\
F3gKdhPZwvj+Af/nXkZ\"*)(*]VB*)", "Display" -> "codemirror", 
    "Hash" -> "ca7fd3a9-3b2b-452c-b93b-25895632e669", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> ".md\n*Try to drag a red dot*", "Display" -> "codemirror", 
    "Hash" -> "a843a0b5-70ed-4ee4-9403-54e8ca0425f0", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "*Try to drag a red dot*", "Display" -> "markdown", 
    "Hash" -> "b067352e-8499-4739-9868-c372727b0c61", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> ".md\n## FABRIK Solver\nOriginal paper published in \
2011\n\n<iframe class=\"rounded-md border-0 mt-4\" style=\"width:600px; \
height:400px\" \
src=\"http://www.andreasaristidou.com/publications/papers/FABRIK.pdf\"></ifra\
me>", "Display" -> "codemirror", "Hash" -> 
     "d7113819-0adb-4a4b-bc58-e94b58c15d94", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "## FABRIK Solver\nOriginal paper published in 2011\n\n<iframe \
class=\"rounded-md border-0 mt-4\" style=\"width:600px; height:400px\" \
src=\"http://www.andreasaristidou.com/publications/papers/FABRIK.pdf\"></ifra\
me>", "Display" -> "markdown", "Hash" -> 
     "8b1b2f57-a22d-47cc-976e-94f2f81c3f3e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> ".md\nFor the demonstration purposes, we implemented this in \
the simples possible way.", "Display" -> "codemirror", 
    "Hash" -> "ee38b7c9-3779-4cc9-b524-92c32f2a604e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "For the demonstration purposes, we implemented this in the \
simples possible way.", "Display" -> "markdown", 
    "Hash" -> "18be4378-167c-47db-ad48-51ce3512ac88", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> "handler = Function[target,\n  Module[{buffer = chain, origin \
= {-1,0}, prev = chain, lengths = Norm /@ (chain // Reverse // Differences) \
// Reverse},\n    buffer = Table[With[{p = chain[[-i]]},\n      If[i === 1,\n \
       prev = target;\n        target\n      ,\n    \n        prev = prev - \
Normalize[(prev - p)] lengths[[1-i]];\n        prev \n      ]\n    ]   \n    \
, {i, chain // Length}] // Reverse;\n\n    buffer = Table[With[{p = \
buffer[[i]]},\n      If[i === 1,\n        prev = origin;\n        origin\n    \
  ,\n    \n        prev = prev - Normalize[(prev - p)] lengths[[i-1]];\n      \
  prev \n      ]\n    ]\n    , {i, chain // Length}];\n\n    chain = \
buffer;\n   ]\n];", "Display" -> "codemirror", 
    "Hash" -> "7cdbf8d7-ea3d-4c53-9d4e-1094283dd4e7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "cd6f02c1-e382-4861-b549-91676ed983ff", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0c14ab53-e20b-4724-a7bc-e401a1483a87"|>}, "serializer" -> "jsfn4"|>
